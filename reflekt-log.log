logging: reflekt: TO SAVE METADATA FLAG false;
logging: reflekt: DEPENDENCY JARS: [/Users/Anastasiia.Birillo/.m2/repository/io/kotless/kotless-lang-aws/0.2.0/kotless-lang-aws-0.2.0.jar, /Users/Anastasiia.Birillo/.m2/repository/io/kotless/kotless-lang/0.2.0/kotless-lang-0.2.0.jar, /Users/Anastasiia.Birillo/.m2/repository/io/kotless/lang-common/0.2.0/lang-common-0.2.0.jar, /Users/Anastasiia.Birillo/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.5.30/kotlin-stdlib-jdk8-1.5.30.jar, /Users/Anastasiia.Birillo/.gradle/caches/modules-2/files-2.1/commons-validator/commons-validator/1.6/e989d1e87cdd60575df0765ed5bac65c905d7908/commons-validator-1.6.jar, /Users/Anastasiia.Birillo/.gradle/caches/modules-2/files-2.1/com.amazonaws/aws-java-sdk-dynamodb/1.11.650/7238a0abb26fd4641527f6c6f6a55f1ed6572e89/aws-java-sdk-dynamodb-1.11.650.jar, /Users/Anastasiia.Birillo/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlinx/kotlinx-html-jvm/0.6.11/f00e83265b61a8a9c3abab62a7eaf9172d4496d6/kotlinx-html-jvm-0.6.11.jar, /Users/Anastasiia.Birillo/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.5.30/kotlin-stdlib-jdk7-1.5.30.jar, /Users/Anastasiia.Birillo/.m2/repository/io/kotless/model/0.2.0/model-0.2.0.jar, /Users/Anastasiia.Birillo/.m2/repository/org/jetbrains/kotlinx/kotlinx-serialization-json-jvm/1.0.1/kotlinx-serialization-json-jvm-1.0.1.jar, /Users/Anastasiia.Birillo/.m2/repository/org/jetbrains/kotlinx/kotlinx-serialization-core-jvm/1.0.1/kotlinx-serialization-core-jvm-1.0.1.jar, /Users/Anastasiia.Birillo/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib/1.5.30/kotlin-stdlib-1.5.30.jar, /Users/Anastasiia.Birillo/.gradle/caches/modules-2/files-2.1/commons-beanutils/commons-beanutils/1.9.2/7a87d845ad3a155297e8f67d9008f4c1e5656b71/commons-beanutils-1.9.2.jar, /Users/Anastasiia.Birillo/.gradle/caches/modules-2/files-2.1/commons-digester/commons-digester/1.8.1/3dec9b9c7ea9342d4dbe8c38560080d85b44a015/commons-digester-1.8.1.jar, /Users/Anastasiia.Birillo/.gradle/caches/modules-2/files-2.1/com.amazonaws/aws-java-sdk-s3/1.11.650/bdba986b3472945dcdca46ac35f36c53d959ab1d/aws-java-sdk-s3-1.11.650.jar, /Users/Anastasiia.Birillo/.gradle/caches/modules-2/files-2.1/com.amazonaws/aws-java-sdk-kms/1.11.650/3c1e30efd3d76eb68d1333f984f18e4fe3e814ec/aws-java-sdk-kms-1.11.650.jar, /Users/Anastasiia.Birillo/.gradle/caches/modules-2/files-2.1/com.amazonaws/aws-java-sdk-core/1.11.788/f0bee5cad13b2df5693d99e4beb37f0ef2377f1/aws-java-sdk-core-1.11.788.jar, /Users/Anastasiia.Birillo/.m2/repository/org/apache/httpcomponents/httpclient/4.5.9/httpclient-4.5.9.jar, /Users/Anastasiia.Birillo/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar, /Users/Anastasiia.Birillo/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar, /Users/Anastasiia.Birillo/.gradle/caches/modules-2/files-2.1/com.amazonaws/jmespath-java/1.11.650/d1e882b9e449e10cef5267346289e8d0082a69cc/jmespath-java-1.11.650.jar, /Users/Anastasiia.Birillo/.m2/repository/org/jetbrains/annotations/13.0/annotations-13.0.jar, /Users/Anastasiia.Birillo/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-common/1.5.30/kotlin-stdlib-common-1.5.30.jar, /Users/Anastasiia.Birillo/.m2/repository/org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30.jar, /Users/Anastasiia.Birillo/.gradle/caches/modules-2/files-2.1/com.microsoft.azure.functions/azure-functions-java-library/1.2.2/685a730737f6e908b9b87610cd08268d5fb7bc19/azure-functions-java-library-1.2.2.jar, /Users/Anastasiia.Birillo/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.10.3/jackson-databind-2.10.3.jar, /Users/Anastasiia.Birillo/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.dataformat/jackson-dataformat-cbor/2.10.3/1ba01fef9c3b7ed388d91e71dc733b315c7374cd/jackson-dataformat-cbor-2.10.3.jar, /Users/Anastasiia.Birillo/.m2/repository/com/amazonaws/aws-lambda-java-core/1.2.0/aws-lambda-java-core-1.2.0.jar, /Users/Anastasiia.Birillo/.m2/repository/software/amazon/ion/ion-java/1.0.2/ion-java-1.0.2.jar, /Users/Anastasiia.Birillo/.m2/repository/joda-time/joda-time/2.8.1/joda-time-2.8.1.jar, /Users/Anastasiia.Birillo/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.10.3/jackson-annotations-2.10.3.jar, /Users/Anastasiia.Birillo/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.10.3/jackson-core-2.10.3.jar, /Users/Anastasiia.Birillo/.m2/repository/org/apache/httpcomponents/httpcore/4.4.11/httpcore-4.4.11.jar, /Users/Anastasiia.Birillo/.m2/repository/commons-codec/commons-codec/1.11/commons-codec-1.11.jar];
logging: reflekt: INTROSPECT CLASS FILES: [/Users/Anastasiia.Birillo/.m2/repository/io/kotless/kotless-lang/0.2.0/META-INF/ReflektMeta];
logging: reflekt: PROJECT FILE PATH: null
logging: reflekt: REFLEKT ALL TIME: 4 ms
logging: reflekt: ReflektAnalysisExtension is starting...
logging: reflekt: reflektMetaFiles [/Users/Anastasiia.Birillo/.m2/repository/io/kotless/kotless-lang/0.2.0/META-INF/ReflektMeta]
logging: reflekt: Deserialized invokes: ReflektInvokes(objects={io.kotless.dsl.app.http.RoutesDispatcher.kt=[SupertypesToAnnotations(supertypes=[io.kotless.dsl.lang.http.HttpRequestInterceptor], annotations=[])], io.kotless.dsl.Application.kt=[SupertypesToAnnotations(supertypes=[io.kotless.dsl.lang.LambdaInit], annotations=[]), SupertypesToAnnotations(supertypes=[io.kotless.dsl.lang.LambdaWarming], annotations=[])]}, classes={}, functions={io.kotless.dsl.app.events.EventsReflectionScanner.kt=[SignatureToAnnotations(signature=Function0<Unit>, annotations=[io.kotless.dsl.lang.event.Scheduled])], io.kotless.dsl.app.http.RoutesStorage.kt=[SignatureToAnnotations(signature=Function0<String>, annotations=[io.kotless.dsl.lang.http.Get])]})
logging: reflekt: Deserialized packages: [io.kotless.dsl, io.kotless.dsl.app.events, io.kotless.dsl.app.http, io.kotless.dsl.config, io.kotless.dsl.conversion, io.kotless.dsl.lang, io.kotless.dsl.lang.event, io.kotless.dsl.lang.http, io.kotless.dsl.reflection]
logging: reflekt: Library invokes: ReflektInvokes(objects={io.kotless.dsl.app.http.RoutesDispatcher.kt=[SupertypesToAnnotations(supertypes=[io.kotless.dsl.lang.http.HttpRequestInterceptor], annotations=[])], io.kotless.dsl.Application.kt=[SupertypesToAnnotations(supertypes=[io.kotless.dsl.lang.LambdaInit], annotations=[]), SupertypesToAnnotations(supertypes=[io.kotless.dsl.lang.LambdaWarming], annotations=[])]}, classes={}, functions={io.kotless.dsl.app.events.EventsReflectionScanner.kt=[SignatureToAnnotations(signature=Function0<Unit>, annotations=[io.kotless.dsl.lang.event.Scheduled])], io.kotless.dsl.app.http.RoutesStorage.kt=[SignatureToAnnotations(signature=Function0<String>, annotations=[io.kotless.dsl.lang.http.Get])]})
logging: reflekt: Library packages: [io.kotless.dsl, io.kotless.dsl.app.events, io.kotless.dsl.app.http, io.kotless.dsl.config, io.kotless.dsl.conversion, io.kotless.dsl.lang, io.kotless.dsl.lang.event, io.kotless.dsl.lang.http, io.kotless.dsl.reflection]
logging: reflekt: Getting invokes from sources....
logging: reflekt: Start analyzing file Root.kt (package io.kotless.examples.page)
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression page is valid: false
logging: reflekt: Expression page is valid: false
logging: reflekt: Expression page is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression http is valid: false
logging: reflekt: Expression http is valid: false
logging: reflekt: Expression http is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression utils is valid: false
logging: reflekt: Expression utils is valid: false
logging: reflekt: Expression utils is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression kotlinx is valid: false
logging: reflekt: Expression kotlinx is valid: false
logging: reflekt: Expression kotlinx is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression Get is valid: false
logging: reflekt: Expression Get is valid: false
logging: reflekt: Expression Get is valid: false
logging: reflekt: Expression html {
    head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    }
    body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    }
} is valid: false
logging: reflekt: Expression html {
    head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    }
    body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    }
} is valid: false
logging: reflekt: Expression html {
    head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    }
    body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    }
} is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    } is valid: false
logging: reflekt: Expression head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    } is valid: false
logging: reflekt: Expression head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    } is valid: false
logging: reflekt: Expression head is valid: false
logging: reflekt: Expression head is valid: false
logging: reflekt: Expression head is valid: false
logging: reflekt: Expression title {
            +"Shortless"
        } is valid: false
logging: reflekt: Expression title {
            +"Shortless"
        } is valid: false
logging: reflekt: Expression title {
            +"Shortless"
        } is valid: false
logging: reflekt: Expression title is valid: false
logging: reflekt: Expression title is valid: false
logging: reflekt: Expression title is valid: false
logging: reflekt: Expression + is valid: false
logging: reflekt: Expression + is valid: false
logging: reflekt: Expression + is valid: false
logging: reflekt: Expression link {
            href = ::faviconIco.href
            rel = "icon"
        } is valid: false
logging: reflekt: Expression link {
            href = ::faviconIco.href
            rel = "icon"
        } is valid: false
logging: reflekt: Expression link {
            href = ::faviconIco.href
            rel = "icon"
        } is valid: false
logging: reflekt: Expression link is valid: false
logging: reflekt: Expression link is valid: false
logging: reflekt: Expression link is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression faviconIco is valid: false
logging: reflekt: Expression faviconIco is valid: false
logging: reflekt: Expression faviconIco is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression rel is valid: false
logging: reflekt: Expression rel is valid: false
logging: reflekt: Expression rel is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        } is valid: false
logging: reflekt: Expression link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        } is valid: false
logging: reflekt: Expression link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        } is valid: false
logging: reflekt: Expression link is valid: false
logging: reflekt: Expression link is valid: false
logging: reflekt: Expression link is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression rel is valid: false
logging: reflekt: Expression rel is valid: false
logging: reflekt: Expression rel is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        } is valid: false
logging: reflekt: Expression link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        } is valid: false
logging: reflekt: Expression link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        } is valid: false
logging: reflekt: Expression link is valid: false
logging: reflekt: Expression link is valid: false
logging: reflekt: Expression link is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression rel is valid: false
logging: reflekt: Expression rel is valid: false
logging: reflekt: Expression rel is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression link {
            href = ::siteCss.href
            rel = "stylesheet"
        } is valid: false
logging: reflekt: Expression link {
            href = ::siteCss.href
            rel = "stylesheet"
        } is valid: false
logging: reflekt: Expression link {
            href = ::siteCss.href
            rel = "stylesheet"
        } is valid: false
logging: reflekt: Expression link is valid: false
logging: reflekt: Expression link is valid: false
logging: reflekt: Expression link is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression siteCss is valid: false
logging: reflekt: Expression siteCss is valid: false
logging: reflekt: Expression siteCss is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression rel is valid: false
logging: reflekt: Expression rel is valid: false
logging: reflekt: Expression rel is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression script { src = ::siteJs.href } is valid: false
logging: reflekt: Expression script { src = ::siteJs.href } is valid: false
logging: reflekt: Expression script { src = ::siteJs.href } is valid: false
logging: reflekt: Expression script is valid: false
logging: reflekt: Expression script is valid: false
logging: reflekt: Expression script is valid: false
logging: reflekt: Expression src is valid: false
logging: reflekt: Expression src is valid: false
logging: reflekt: Expression src is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression siteJs is valid: false
logging: reflekt: Expression siteJs is valid: false
logging: reflekt: Expression siteJs is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    } is valid: false
logging: reflekt: Expression body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    } is valid: false
logging: reflekt: Expression body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    } is valid: false
logging: reflekt: Expression body is valid: false
logging: reflekt: Expression body is valid: false
logging: reflekt: Expression body is valid: false
logging: reflekt: Expression div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        } is valid: false
logging: reflekt: Expression div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        } is valid: false
logging: reflekt: Expression div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        } is valid: false
logging: reflekt: Expression div is valid: false
logging: reflekt: Expression div is valid: false
logging: reflekt: Expression div is valid: false
logging: reflekt: Expression input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            } is valid: false
logging: reflekt: Expression input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            } is valid: false
logging: reflekt: Expression input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            } is valid: false
logging: reflekt: Expression input is valid: false
logging: reflekt: Expression input is valid: false
logging: reflekt: Expression input is valid: false
logging: reflekt: Expression id is valid: false
logging: reflekt: Expression id is valid: false
logging: reflekt: Expression id is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression classes is valid: false
logging: reflekt: Expression classes is valid: false
logging: reflekt: Expression classes is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression setOf("url-input") is valid: false
logging: reflekt: Expression setOf("url-input") is valid: false
logging: reflekt: Expression setOf("url-input") is valid: false
logging: reflekt: Expression setOf is valid: false
logging: reflekt: Expression setOf is valid: false
logging: reflekt: Expression setOf is valid: false
logging: reflekt: Expression type is valid: false
logging: reflekt: Expression type is valid: false
logging: reflekt: Expression type is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression InputType is valid: false
logging: reflekt: Expression InputType is valid: false
logging: reflekt: Expression InputType is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression placeholder is valid: false
logging: reflekt: Expression placeholder is valid: false
logging: reflekt: Expression placeholder is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            } is valid: false
logging: reflekt: Expression button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            } is valid: false
logging: reflekt: Expression button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            } is valid: false
logging: reflekt: Expression button is valid: false
logging: reflekt: Expression button is valid: false
logging: reflekt: Expression button is valid: false
logging: reflekt: Expression id is valid: false
logging: reflekt: Expression id is valid: false
logging: reflekt: Expression id is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression classes is valid: false
logging: reflekt: Expression classes is valid: false
logging: reflekt: Expression classes is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression setOf("url-button") is valid: false
logging: reflekt: Expression setOf("url-button") is valid: false
logging: reflekt: Expression setOf("url-button") is valid: false
logging: reflekt: Expression setOf is valid: false
logging: reflekt: Expression setOf is valid: false
logging: reflekt: Expression setOf is valid: false
logging: reflekt: Expression type is valid: false
logging: reflekt: Expression type is valid: false
logging: reflekt: Expression type is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression ButtonType is valid: false
logging: reflekt: Expression ButtonType is valid: false
logging: reflekt: Expression ButtonType is valid: false
logging: reflekt: Expression submit is valid: false
logging: reflekt: Expression submit is valid: false
logging: reflekt: Expression submit is valid: false
logging: reflekt: Expression span {
                    id = "shorten-button-text"
                    +"Go!"
                } is valid: false
logging: reflekt: Expression span {
                    id = "shorten-button-text"
                    +"Go!"
                } is valid: false
logging: reflekt: Expression span {
                    id = "shorten-button-text"
                    +"Go!"
                } is valid: false
logging: reflekt: Expression span is valid: false
logging: reflekt: Expression span is valid: false
logging: reflekt: Expression span is valid: false
logging: reflekt: Expression id is valid: false
logging: reflekt: Expression id is valid: false
logging: reflekt: Expression id is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression + is valid: false
logging: reflekt: Expression + is valid: false
logging: reflekt: Expression + is valid: false
logging: reflekt: Expression div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        } is valid: false
logging: reflekt: Expression div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        } is valid: false
logging: reflekt: Expression div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        } is valid: false
logging: reflekt: Expression div is valid: false
logging: reflekt: Expression div is valid: false
logging: reflekt: Expression div is valid: false
logging: reflekt: Expression span("footer-text") {
                +"Shortless"
            } is valid: false
logging: reflekt: Expression span("footer-text") {
                +"Shortless"
            } is valid: false
logging: reflekt: Expression span("footer-text") {
                +"Shortless"
            } is valid: false
logging: reflekt: Expression span is valid: false
logging: reflekt: Expression span is valid: false
logging: reflekt: Expression span is valid: false
logging: reflekt: Expression + is valid: false
logging: reflekt: Expression + is valid: false
logging: reflekt: Expression + is valid: false
logging: reflekt: Expression span("footer-muted-text") {
                +"Powered by Kotless"
            } is valid: false
logging: reflekt: Expression span("footer-muted-text") {
                +"Powered by Kotless"
            } is valid: false
logging: reflekt: Expression span("footer-muted-text") {
                +"Powered by Kotless"
            } is valid: false
logging: reflekt: Expression span is valid: false
logging: reflekt: Expression span is valid: false
logging: reflekt: Expression span is valid: false
logging: reflekt: Expression + is valid: false
logging: reflekt: Expression + is valid: false
logging: reflekt: Expression + is valid: false
logging: reflekt: Finish analyzing file Root.kt (package io.kotless.examples.page)
logging: reflekt: Start analyzing file Shortener.kt (package io.kotless.examples.page)
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression page is valid: false
logging: reflekt: Expression page is valid: false
logging: reflekt: Expression page is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression http is valid: false
logging: reflekt: Expression http is valid: false
logging: reflekt: Expression http is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression model is valid: false
logging: reflekt: Expression model is valid: false
logging: reflekt: Expression model is valid: false
logging: reflekt: Expression HttpResponse is valid: false
logging: reflekt: Expression HttpResponse is valid: false
logging: reflekt: Expression HttpResponse is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression storage is valid: false
logging: reflekt: Expression storage is valid: false
logging: reflekt: Expression storage is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression apache is valid: false
logging: reflekt: Expression apache is valid: false
logging: reflekt: Expression apache is valid: false
logging: reflekt: Expression commons is valid: false
logging: reflekt: Expression commons is valid: false
logging: reflekt: Expression commons is valid: false
logging: reflekt: Expression validator is valid: false
logging: reflekt: Expression validator is valid: false
logging: reflekt: Expression validator is valid: false
logging: reflekt: Expression routines is valid: false
logging: reflekt: Expression routines is valid: false
logging: reflekt: Expression routines is valid: false
logging: reflekt: Expression UrlValidator is valid: false
logging: reflekt: Expression UrlValidator is valid: false
logging: reflekt: Expression UrlValidator is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression slf4j is valid: false
logging: reflekt: Expression slf4j is valid: false
logging: reflekt: Expression slf4j is valid: false
logging: reflekt: Expression LoggerFactory is valid: false
logging: reflekt: Expression LoggerFactory is valid: false
logging: reflekt: Expression LoggerFactory is valid: false
logging: reflekt: Expression Get is valid: false
logging: reflekt: Expression Get is valid: false
logging: reflekt: Expression Get is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression HttpResponse is valid: false
logging: reflekt: Expression HttpResponse is valid: false
logging: reflekt: Expression HttpResponse is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression getByCode(k) is valid: false
logging: reflekt: Expression getByCode(k) is valid: false
logging: reflekt: Expression getByCode(k) is valid: false
logging: reflekt: Expression getByCode is valid: false
logging: reflekt: Expression getByCode is valid: false
logging: reflekt: Expression getByCode is valid: false
logging: reflekt: Expression k is valid: false
logging: reflekt: Expression k is valid: false
logging: reflekt: Expression k is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression == is valid: false
logging: reflekt: Expression == is valid: false
logging: reflekt: Expression == is valid: false
logging: reflekt: Expression notFound("Unknown short URL") is valid: false
logging: reflekt: Expression notFound("Unknown short URL") is valid: false
logging: reflekt: Expression notFound("Unknown short URL") is valid: false
logging: reflekt: Expression notFound is valid: false
logging: reflekt: Expression notFound is valid: false
logging: reflekt: Expression notFound is valid: false
logging: reflekt: Expression redirect(url) is valid: false
logging: reflekt: Expression redirect(url) is valid: false
logging: reflekt: Expression redirect(url) is valid: false
logging: reflekt: Expression redirect is valid: false
logging: reflekt: Expression redirect is valid: false
logging: reflekt: Expression redirect is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression LoggerFactory is valid: false
logging: reflekt: Expression LoggerFactory is valid: false
logging: reflekt: Expression LoggerFactory is valid: false
logging: reflekt: Expression getLogger("ShortenerKt") is valid: false
logging: reflekt: Expression getLogger("ShortenerKt") is valid: false
logging: reflekt: Expression getLogger("ShortenerKt") is valid: false
logging: reflekt: Expression getLogger is valid: false
logging: reflekt: Expression getLogger is valid: false
logging: reflekt: Expression getLogger is valid: false
logging: reflekt: Expression Get is valid: false
logging: reflekt: Expression Get is valid: false
logging: reflekt: Expression Get is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression logger is valid: false
logging: reflekt: Expression logger is valid: false
logging: reflekt: Expression logger is valid: false
logging: reflekt: Expression info("URL for shortening $value") is valid: false
logging: reflekt: Expression info("URL for shortening $value") is valid: false
logging: reflekt: Expression info("URL for shortening $value") is valid: false
logging: reflekt: Expression info is valid: false
logging: reflekt: Expression info is valid: false
logging: reflekt: Expression info is valid: false
logging: reflekt: Expression value is valid: false
logging: reflekt: Expression value is valid: false
logging: reflekt: Expression value is valid: false
logging: reflekt: Expression value is valid: false
logging: reflekt: Expression value is valid: false
logging: reflekt: Expression value is valid: false
logging: reflekt: Expression contains("://") is valid: false
logging: reflekt: Expression contains("://") is valid: false
logging: reflekt: Expression contains("://") is valid: false
logging: reflekt: Expression contains is valid: false
logging: reflekt: Expression contains is valid: false
logging: reflekt: Expression contains is valid: false
logging: reflekt: Expression not() is valid: false
logging: reflekt: Expression not() is valid: false
logging: reflekt: Expression not() is valid: false
logging: reflekt: Expression not is valid: false
logging: reflekt: Expression not is valid: false
logging: reflekt: Expression not is valid: false
logging: reflekt: Expression value is valid: false
logging: reflekt: Expression value is valid: false
logging: reflekt: Expression value is valid: false
logging: reflekt: Expression value is valid: false
logging: reflekt: Expression value is valid: false
logging: reflekt: Expression value is valid: false
logging: reflekt: Expression UrlValidator is valid: false
logging: reflekt: Expression UrlValidator is valid: false
logging: reflekt: Expression UrlValidator is valid: false
logging: reflekt: Expression getInstance() is valid: false
logging: reflekt: Expression getInstance() is valid: false
logging: reflekt: Expression getInstance() is valid: false
logging: reflekt: Expression getInstance is valid: false
logging: reflekt: Expression getInstance is valid: false
logging: reflekt: Expression getInstance is valid: false
logging: reflekt: Expression isValid(url) is valid: false
logging: reflekt: Expression isValid(url) is valid: false
logging: reflekt: Expression isValid(url) is valid: false
logging: reflekt: Expression isValid is valid: false
logging: reflekt: Expression isValid is valid: false
logging: reflekt: Expression isValid is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression not() is valid: false
logging: reflekt: Expression not() is valid: false
logging: reflekt: Expression not() is valid: false
logging: reflekt: Expression not is valid: false
logging: reflekt: Expression not is valid: false
logging: reflekt: Expression not is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression getByUrl(url) is valid: false
logging: reflekt: Expression getByUrl(url) is valid: false
logging: reflekt: Expression getByUrl(url) is valid: false
logging: reflekt: Expression getByUrl is valid: false
logging: reflekt: Expression getByUrl is valid: false
logging: reflekt: Expression getByUrl is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression ?: is valid: false
logging: reflekt: Expression ?: is valid: false
logging: reflekt: Expression ?: is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression createCode(url) is valid: false
logging: reflekt: Expression createCode(url) is valid: false
logging: reflekt: Expression createCode(url) is valid: false
logging: reflekt: Expression createCode is valid: false
logging: reflekt: Expression createCode is valid: false
logging: reflekt: Expression createCode is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression redirectUrl is valid: false
logging: reflekt: Expression redirectUrl is valid: false
logging: reflekt: Expression redirectUrl is valid: false
logging: reflekt: Expression href(code) is valid: false
logging: reflekt: Expression href(code) is valid: false
logging: reflekt: Expression href(code) is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression href is valid: false
logging: reflekt: Expression code is valid: false
logging: reflekt: Expression code is valid: false
logging: reflekt: Expression code is valid: false
logging: reflekt: Finish analyzing file Shortener.kt (package io.kotless.examples.page)
logging: reflekt: Start analyzing file Statics.kt (package io.kotless.examples.page)
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression page is valid: false
logging: reflekt: Expression page is valid: false
logging: reflekt: Expression page is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression MimeType is valid: false
logging: reflekt: Expression MimeType is valid: false
logging: reflekt: Expression MimeType is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression http is valid: false
logging: reflekt: Expression http is valid: false
logging: reflekt: Expression http is valid: false
logging: reflekt: Expression StaticGet is valid: false
logging: reflekt: Expression StaticGet is valid: false
logging: reflekt: Expression StaticGet is valid: false
logging: reflekt: Expression java is valid: false
logging: reflekt: Expression java is valid: false
logging: reflekt: Expression java is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression File is valid: false
logging: reflekt: Expression File is valid: false
logging: reflekt: Expression File is valid: false
logging: reflekt: Expression StaticGet is valid: false
logging: reflekt: Expression StaticGet is valid: false
logging: reflekt: Expression StaticGet is valid: false
logging: reflekt: Expression MimeType is valid: false
logging: reflekt: Expression MimeType is valid: false
logging: reflekt: Expression MimeType is valid: false
logging: reflekt: Expression CSS is valid: false
logging: reflekt: Expression CSS is valid: false
logging: reflekt: Expression CSS is valid: false
logging: reflekt: Expression File("css/shortener.css") is valid: false
logging: reflekt: Expression File("css/shortener.css") is valid: false
logging: reflekt: Expression File("css/shortener.css") is valid: false
logging: reflekt: Expression File is valid: false
logging: reflekt: Expression File is valid: false
logging: reflekt: Expression File is valid: false
logging: reflekt: Expression StaticGet is valid: false
logging: reflekt: Expression StaticGet is valid: false
logging: reflekt: Expression StaticGet is valid: false
logging: reflekt: Expression MimeType is valid: false
logging: reflekt: Expression MimeType is valid: false
logging: reflekt: Expression MimeType is valid: false
logging: reflekt: Expression JS is valid: false
logging: reflekt: Expression JS is valid: false
logging: reflekt: Expression JS is valid: false
logging: reflekt: Expression File("js/shortener.js") is valid: false
logging: reflekt: Expression File("js/shortener.js") is valid: false
logging: reflekt: Expression File("js/shortener.js") is valid: false
logging: reflekt: Expression File is valid: false
logging: reflekt: Expression File is valid: false
logging: reflekt: Expression File is valid: false
logging: reflekt: Expression StaticGet is valid: false
logging: reflekt: Expression StaticGet is valid: false
logging: reflekt: Expression StaticGet is valid: false
logging: reflekt: Expression MimeType is valid: false
logging: reflekt: Expression MimeType is valid: false
logging: reflekt: Expression MimeType is valid: false
logging: reflekt: Expression APNG is valid: false
logging: reflekt: Expression APNG is valid: false
logging: reflekt: Expression APNG is valid: false
logging: reflekt: Expression File("favicon.apng") is valid: false
logging: reflekt: Expression File("favicon.apng") is valid: false
logging: reflekt: Expression File("favicon.apng") is valid: false
logging: reflekt: Expression File is valid: false
logging: reflekt: Expression File is valid: false
logging: reflekt: Expression File is valid: false
logging: reflekt: Finish analyzing file Statics.kt (package io.kotless.examples.page)
logging: reflekt: Start analyzing file URLStorage.kt (package io.kotless.examples.storage)
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression storage is valid: false
logging: reflekt: Expression storage is valid: false
logging: reflekt: Expression storage is valid: false
logging: reflekt: Expression com is valid: false
logging: reflekt: Expression com is valid: false
logging: reflekt: Expression com is valid: false
logging: reflekt: Expression amazonaws is valid: false
logging: reflekt: Expression amazonaws is valid: false
logging: reflekt: Expression amazonaws is valid: false
logging: reflekt: Expression services is valid: false
logging: reflekt: Expression services is valid: false
logging: reflekt: Expression services is valid: false
logging: reflekt: Expression dynamodbv2 is valid: false
logging: reflekt: Expression dynamodbv2 is valid: false
logging: reflekt: Expression dynamodbv2 is valid: false
logging: reflekt: Expression AmazonDynamoDBClientBuilder is valid: false
logging: reflekt: Expression AmazonDynamoDBClientBuilder is valid: false
logging: reflekt: Expression AmazonDynamoDBClientBuilder is valid: false
logging: reflekt: Expression com is valid: false
logging: reflekt: Expression com is valid: false
logging: reflekt: Expression com is valid: false
logging: reflekt: Expression amazonaws is valid: false
logging: reflekt: Expression amazonaws is valid: false
logging: reflekt: Expression amazonaws is valid: false
logging: reflekt: Expression services is valid: false
logging: reflekt: Expression services is valid: false
logging: reflekt: Expression services is valid: false
logging: reflekt: Expression dynamodbv2 is valid: false
logging: reflekt: Expression dynamodbv2 is valid: false
logging: reflekt: Expression dynamodbv2 is valid: false
logging: reflekt: Expression model is valid: false
logging: reflekt: Expression model is valid: false
logging: reflekt: Expression model is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression AwsResource is valid: false
logging: reflekt: Expression AwsResource is valid: false
logging: reflekt: Expression AwsResource is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression PermissionLevel is valid: false
logging: reflekt: Expression PermissionLevel is valid: false
logging: reflekt: Expression PermissionLevel is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression DynamoDBTable is valid: false
logging: reflekt: Expression DynamoDBTable is valid: false
logging: reflekt: Expression DynamoDBTable is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression event is valid: false
logging: reflekt: Expression event is valid: false
logging: reflekt: Expression event is valid: false
logging: reflekt: Expression Scheduled is valid: false
logging: reflekt: Expression Scheduled is valid: false
logging: reflekt: Expression Scheduled is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression dsl is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression lang is valid: false
logging: reflekt: Expression withKotlessLocal is valid: false
logging: reflekt: Expression withKotlessLocal is valid: false
logging: reflekt: Expression withKotlessLocal is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression utils is valid: false
logging: reflekt: Expression utils is valid: false
logging: reflekt: Expression utils is valid: false
logging: reflekt: Expression RandomCode is valid: false
logging: reflekt: Expression RandomCode is valid: false
logging: reflekt: Expression RandomCode is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression slf4j is valid: false
logging: reflekt: Expression slf4j is valid: false
logging: reflekt: Expression slf4j is valid: false
logging: reflekt: Expression LoggerFactory is valid: false
logging: reflekt: Expression LoggerFactory is valid: false
logging: reflekt: Expression LoggerFactory is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression DynamoDBTable is valid: false
logging: reflekt: Expression DynamoDBTable is valid: false
logging: reflekt: Expression DynamoDBTable is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression PermissionLevel is valid: false
logging: reflekt: Expression PermissionLevel is valid: false
logging: reflekt: Expression PermissionLevel is valid: false
logging: reflekt: Expression ReadWrite is valid: false
logging: reflekt: Expression ReadWrite is valid: false
logging: reflekt: Expression ReadWrite is valid: false
logging: reflekt: Expression LoggerFactory is valid: false
logging: reflekt: Expression LoggerFactory is valid: false
logging: reflekt: Expression LoggerFactory is valid: false
logging: reflekt: Expression getLogger(URLStorage::class.java) is valid: false
logging: reflekt: Expression getLogger(URLStorage::class.java) is valid: false
logging: reflekt: Expression getLogger(URLStorage::class.java) is valid: false
logging: reflekt: Expression getLogger is valid: false
logging: reflekt: Expression getLogger is valid: false
logging: reflekt: Expression getLogger is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression URLStorage is valid: false
logging: reflekt: Expression java is valid: false
logging: reflekt: Expression java is valid: false
logging: reflekt: Expression java is valid: false
logging: reflekt: Expression AmazonDynamoDBClientBuilder is valid: false
logging: reflekt: Expression AmazonDynamoDBClientBuilder is valid: false
logging: reflekt: Expression AmazonDynamoDBClientBuilder is valid: false
logging: reflekt: Expression standard() is valid: false
logging: reflekt: Expression standard() is valid: false
logging: reflekt: Expression standard() is valid: false
logging: reflekt: Expression standard is valid: false
logging: reflekt: Expression standard is valid: false
logging: reflekt: Expression standard is valid: false
logging: reflekt: Expression withKotlessLocal(AwsResource.DynamoDB) is valid: false
logging: reflekt: Expression withKotlessLocal(AwsResource.DynamoDB) is valid: false
logging: reflekt: Expression withKotlessLocal(AwsResource.DynamoDB) is valid: false
logging: reflekt: Expression withKotlessLocal is valid: false
logging: reflekt: Expression withKotlessLocal is valid: false
logging: reflekt: Expression withKotlessLocal is valid: false
logging: reflekt: Expression AwsResource is valid: false
logging: reflekt: Expression AwsResource is valid: false
logging: reflekt: Expression AwsResource is valid: false
logging: reflekt: Expression DynamoDB is valid: false
logging: reflekt: Expression DynamoDB is valid: false
logging: reflekt: Expression DynamoDB is valid: false
logging: reflekt: Expression build() is valid: false
logging: reflekt: Expression build() is valid: false
logging: reflekt: Expression build() is valid: false
logging: reflekt: Expression build is valid: false
logging: reflekt: Expression build is valid: false
logging: reflekt: Expression build is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression GetItemRequest() is valid: false
logging: reflekt: Expression GetItemRequest() is valid: false
logging: reflekt: Expression GetItemRequest() is valid: false
logging: reflekt: Expression GetItemRequest is valid: false
logging: reflekt: Expression GetItemRequest is valid: false
logging: reflekt: Expression GetItemRequest is valid: false
logging: reflekt: Expression withKey(mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        )) is valid: false
logging: reflekt: Expression withKey(mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        )) is valid: false
logging: reflekt: Expression withKey(mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        )) is valid: false
logging: reflekt: Expression withKey is valid: false
logging: reflekt: Expression withKey is valid: false
logging: reflekt: Expression withKey is valid: false
logging: reflekt: Expression mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        ) is valid: false
logging: reflekt: Expression mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        ) is valid: false
logging: reflekt: Expression mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        ) is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression apply { s = code } is valid: false
logging: reflekt: Expression apply { s = code } is valid: false
logging: reflekt: Expression apply { s = code } is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression code is valid: false
logging: reflekt: Expression code is valid: false
logging: reflekt: Expression code is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression getItem(req) is valid: false
logging: reflekt: Expression getItem(req) is valid: false
logging: reflekt: Expression getItem(req) is valid: false
logging: reflekt: Expression getItem is valid: false
logging: reflekt: Expression getItem is valid: false
logging: reflekt: Expression getItem is valid: false
logging: reflekt: Expression req is valid: false
logging: reflekt: Expression req is valid: false
logging: reflekt: Expression req is valid: false
logging: reflekt: Expression item is valid: false
logging: reflekt: Expression item is valid: false
logging: reflekt: Expression item is valid: false
logging: reflekt: Expression res is valid: false
logging: reflekt: Expression res is valid: false
logging: reflekt: Expression res is valid: false
logging: reflekt: Expression let { it["URL"]!!.s } is valid: false
logging: reflekt: Expression let { it["URL"]!!.s } is valid: false
logging: reflekt: Expression let { it["URL"]!!.s } is valid: false
logging: reflekt: Expression let is valid: false
logging: reflekt: Expression let is valid: false
logging: reflekt: Expression let is valid: false
logging: reflekt: Expression it["URL"] is valid: false
logging: reflekt: Expression it["URL"] is valid: false
logging: reflekt: Expression it["URL"] is valid: false
logging: reflekt: Expression it is valid: false
logging: reflekt: Expression it is valid: false
logging: reflekt: Expression it is valid: false
logging: reflekt: Expression !! is valid: false
logging: reflekt: Expression !! is valid: false
logging: reflekt: Expression !! is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression ScanRequest() is valid: false
logging: reflekt: Expression ScanRequest() is valid: false
logging: reflekt: Expression ScanRequest() is valid: false
logging: reflekt: Expression ScanRequest is valid: false
logging: reflekt: Expression ScanRequest is valid: false
logging: reflekt: Expression ScanRequest is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression withFilterExpression("#u = :v_url") is valid: false
logging: reflekt: Expression withFilterExpression("#u = :v_url") is valid: false
logging: reflekt: Expression withFilterExpression("#u = :v_url") is valid: false
logging: reflekt: Expression withFilterExpression is valid: false
logging: reflekt: Expression withFilterExpression is valid: false
logging: reflekt: Expression withFilterExpression is valid: false
logging: reflekt: Expression withExpressionAttributeNames(mapOf("#u" to "URL")) is valid: false
logging: reflekt: Expression withExpressionAttributeNames(mapOf("#u" to "URL")) is valid: false
logging: reflekt: Expression withExpressionAttributeNames(mapOf("#u" to "URL")) is valid: false
logging: reflekt: Expression withExpressionAttributeNames is valid: false
logging: reflekt: Expression withExpressionAttributeNames is valid: false
logging: reflekt: Expression withExpressionAttributeNames is valid: false
logging: reflekt: Expression mapOf("#u" to "URL") is valid: false
logging: reflekt: Expression mapOf("#u" to "URL") is valid: false
logging: reflekt: Expression mapOf("#u" to "URL") is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression withExpressionAttributeValues(mapOf(":v_url" to AttributeValue().apply { s = url })) is valid: false
logging: reflekt: Expression withExpressionAttributeValues(mapOf(":v_url" to AttributeValue().apply { s = url })) is valid: false
logging: reflekt: Expression withExpressionAttributeValues(mapOf(":v_url" to AttributeValue().apply { s = url })) is valid: false
logging: reflekt: Expression withExpressionAttributeValues is valid: false
logging: reflekt: Expression withExpressionAttributeValues is valid: false
logging: reflekt: Expression withExpressionAttributeValues is valid: false
logging: reflekt: Expression mapOf(":v_url" to AttributeValue().apply { s = url }) is valid: false
logging: reflekt: Expression mapOf(":v_url" to AttributeValue().apply { s = url }) is valid: false
logging: reflekt: Expression mapOf(":v_url" to AttributeValue().apply { s = url }) is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression apply { s = url } is valid: false
logging: reflekt: Expression apply { s = url } is valid: false
logging: reflekt: Expression apply { s = url } is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression scan(req) is valid: false
logging: reflekt: Expression scan(req) is valid: false
logging: reflekt: Expression scan(req) is valid: false
logging: reflekt: Expression scan is valid: false
logging: reflekt: Expression scan is valid: false
logging: reflekt: Expression scan is valid: false
logging: reflekt: Expression req is valid: false
logging: reflekt: Expression req is valid: false
logging: reflekt: Expression req is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression firstOrNull() is valid: false
logging: reflekt: Expression firstOrNull() is valid: false
logging: reflekt: Expression firstOrNull() is valid: false
logging: reflekt: Expression firstOrNull is valid: false
logging: reflekt: Expression firstOrNull is valid: false
logging: reflekt: Expression firstOrNull is valid: false
logging: reflekt: Expression get("URLHash") is valid: false
logging: reflekt: Expression get("URLHash") is valid: false
logging: reflekt: Expression get("URLHash") is valid: false
logging: reflekt: Expression get is valid: false
logging: reflekt: Expression get is valid: false
logging: reflekt: Expression get is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression RandomCode is valid: false
logging: reflekt: Expression RandomCode is valid: false
logging: reflekt: Expression RandomCode is valid: false
logging: reflekt: Expression next() is valid: false
logging: reflekt: Expression next() is valid: false
logging: reflekt: Expression next() is valid: false
logging: reflekt: Expression next is valid: false
logging: reflekt: Expression next is valid: false
logging: reflekt: Expression next is valid: false
logging: reflekt: Expression mapOf(
            "URLHash" to AttributeValue().apply { s = code },
            "URL" to AttributeValue().apply { s = url },
            "TimeStamp" to AttributeValue().apply { n = System.currentTimeMillis().toString() }
        ) is valid: false
logging: reflekt: Expression mapOf(
            "URLHash" to AttributeValue().apply { s = code },
            "URL" to AttributeValue().apply { s = url },
            "TimeStamp" to AttributeValue().apply { n = System.currentTimeMillis().toString() }
        ) is valid: false
logging: reflekt: Expression mapOf(
            "URLHash" to AttributeValue().apply { s = code },
            "URL" to AttributeValue().apply { s = url },
            "TimeStamp" to AttributeValue().apply { n = System.currentTimeMillis().toString() }
        ) is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression apply { s = code } is valid: false
logging: reflekt: Expression apply { s = code } is valid: false
logging: reflekt: Expression apply { s = code } is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression code is valid: false
logging: reflekt: Expression code is valid: false
logging: reflekt: Expression code is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression apply { s = url } is valid: false
logging: reflekt: Expression apply { s = url } is valid: false
logging: reflekt: Expression apply { s = url } is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression url is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression apply { n = System.currentTimeMillis().toString() } is valid: false
logging: reflekt: Expression apply { n = System.currentTimeMillis().toString() } is valid: false
logging: reflekt: Expression apply { n = System.currentTimeMillis().toString() } is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression n is valid: false
logging: reflekt: Expression n is valid: false
logging: reflekt: Expression n is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression System is valid: false
logging: reflekt: Expression System is valid: false
logging: reflekt: Expression System is valid: false
logging: reflekt: Expression currentTimeMillis() is valid: false
logging: reflekt: Expression currentTimeMillis() is valid: false
logging: reflekt: Expression currentTimeMillis() is valid: false
logging: reflekt: Expression currentTimeMillis is valid: false
logging: reflekt: Expression currentTimeMillis is valid: false
logging: reflekt: Expression currentTimeMillis is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression PutItemRequest() is valid: false
logging: reflekt: Expression PutItemRequest() is valid: false
logging: reflekt: Expression PutItemRequest() is valid: false
logging: reflekt: Expression PutItemRequest is valid: false
logging: reflekt: Expression PutItemRequest is valid: false
logging: reflekt: Expression PutItemRequest is valid: false
logging: reflekt: Expression withItem(values) is valid: false
logging: reflekt: Expression withItem(values) is valid: false
logging: reflekt: Expression withItem(values) is valid: false
logging: reflekt: Expression withItem is valid: false
logging: reflekt: Expression withItem is valid: false
logging: reflekt: Expression withItem is valid: false
logging: reflekt: Expression values is valid: false
logging: reflekt: Expression values is valid: false
logging: reflekt: Expression values is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression putItem(req) is valid: false
logging: reflekt: Expression putItem(req) is valid: false
logging: reflekt: Expression putItem(req) is valid: false
logging: reflekt: Expression putItem is valid: false
logging: reflekt: Expression putItem is valid: false
logging: reflekt: Expression putItem is valid: false
logging: reflekt: Expression req is valid: false
logging: reflekt: Expression req is valid: false
logging: reflekt: Expression req is valid: false
logging: reflekt: Expression code is valid: false
logging: reflekt: Expression code is valid: false
logging: reflekt: Expression code is valid: false
logging: reflekt: Expression Scheduled is valid: false
logging: reflekt: Expression Scheduled is valid: false
logging: reflekt: Expression Scheduled is valid: false
logging: reflekt: Expression Scheduled is valid: false
logging: reflekt: Expression Scheduled is valid: false
logging: reflekt: Expression Scheduled is valid: false
logging: reflekt: Expression everyHour is valid: false
logging: reflekt: Expression everyHour is valid: false
logging: reflekt: Expression everyHour is valid: false
logging: reflekt: Expression logger is valid: false
logging: reflekt: Expression logger is valid: false
logging: reflekt: Expression logger is valid: false
logging: reflekt: Expression info("Starting URL storage cleanup") is valid: false
logging: reflekt: Expression info("Starting URL storage cleanup") is valid: false
logging: reflekt: Expression info("Starting URL storage cleanup") is valid: false
logging: reflekt: Expression info is valid: false
logging: reflekt: Expression info is valid: false
logging: reflekt: Expression info is valid: false
logging: reflekt: Expression System is valid: false
logging: reflekt: Expression System is valid: false
logging: reflekt: Expression System is valid: false
logging: reflekt: Expression currentTimeMillis() is valid: false
logging: reflekt: Expression currentTimeMillis() is valid: false
logging: reflekt: Expression currentTimeMillis() is valid: false
logging: reflekt: Expression currentTimeMillis is valid: false
logging: reflekt: Expression currentTimeMillis is valid: false
logging: reflekt: Expression currentTimeMillis is valid: false
logging: reflekt: Expression - is valid: false
logging: reflekt: Expression - is valid: false
logging: reflekt: Expression - is valid: false
logging: reflekt: Expression * is valid: false
logging: reflekt: Expression * is valid: false
logging: reflekt: Expression * is valid: false
logging: reflekt: Expression * is valid: false
logging: reflekt: Expression * is valid: false
logging: reflekt: Expression * is valid: false
logging: reflekt: Expression * is valid: false
logging: reflekt: Expression * is valid: false
logging: reflekt: Expression * is valid: false
logging: reflekt: Expression ScanRequest() is valid: false
logging: reflekt: Expression ScanRequest() is valid: false
logging: reflekt: Expression ScanRequest() is valid: false
logging: reflekt: Expression ScanRequest is valid: false
logging: reflekt: Expression ScanRequest is valid: false
logging: reflekt: Expression ScanRequest is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression withFilterExpression("#t < :t_time") is valid: false
logging: reflekt: Expression withFilterExpression("#t < :t_time") is valid: false
logging: reflekt: Expression withFilterExpression("#t < :t_time") is valid: false
logging: reflekt: Expression withFilterExpression is valid: false
logging: reflekt: Expression withFilterExpression is valid: false
logging: reflekt: Expression withFilterExpression is valid: false
logging: reflekt: Expression withExpressionAttributeNames(mapOf("#t" to "TimeStamp")) is valid: false
logging: reflekt: Expression withExpressionAttributeNames(mapOf("#t" to "TimeStamp")) is valid: false
logging: reflekt: Expression withExpressionAttributeNames(mapOf("#t" to "TimeStamp")) is valid: false
logging: reflekt: Expression withExpressionAttributeNames is valid: false
logging: reflekt: Expression withExpressionAttributeNames is valid: false
logging: reflekt: Expression withExpressionAttributeNames is valid: false
logging: reflekt: Expression mapOf("#t" to "TimeStamp") is valid: false
logging: reflekt: Expression mapOf("#t" to "TimeStamp") is valid: false
logging: reflekt: Expression mapOf("#t" to "TimeStamp") is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression withExpressionAttributeValues(mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() })) is valid: false
logging: reflekt: Expression withExpressionAttributeValues(mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() })) is valid: false
logging: reflekt: Expression withExpressionAttributeValues(mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() })) is valid: false
logging: reflekt: Expression withExpressionAttributeValues is valid: false
logging: reflekt: Expression withExpressionAttributeValues is valid: false
logging: reflekt: Expression withExpressionAttributeValues is valid: false
logging: reflekt: Expression mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() }) is valid: false
logging: reflekt: Expression mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() }) is valid: false
logging: reflekt: Expression mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() }) is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression apply { n = limitMillis.toString() } is valid: false
logging: reflekt: Expression apply { n = limitMillis.toString() } is valid: false
logging: reflekt: Expression apply { n = limitMillis.toString() } is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression n is valid: false
logging: reflekt: Expression n is valid: false
logging: reflekt: Expression n is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression limitMillis is valid: false
logging: reflekt: Expression limitMillis is valid: false
logging: reflekt: Expression limitMillis is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression scan(req) is valid: false
logging: reflekt: Expression scan(req) is valid: false
logging: reflekt: Expression scan(req) is valid: false
logging: reflekt: Expression scan is valid: false
logging: reflekt: Expression scan is valid: false
logging: reflekt: Expression scan is valid: false
logging: reflekt: Expression req is valid: false
logging: reflekt: Expression req is valid: false
logging: reflekt: Expression req is valid: false
logging: reflekt: Expression logger is valid: false
logging: reflekt: Expression logger is valid: false
logging: reflekt: Expression logger is valid: false
logging: reflekt: Expression info("Cleaning ${items.count} too old items at storage") is valid: false
logging: reflekt: Expression info("Cleaning ${items.count} too old items at storage") is valid: false
logging: reflekt: Expression info("Cleaning ${items.count} too old items at storage") is valid: false
logging: reflekt: Expression info is valid: false
logging: reflekt: Expression info is valid: false
logging: reflekt: Expression info is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression count is valid: false
logging: reflekt: Expression count is valid: false
logging: reflekt: Expression count is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression items is valid: false
logging: reflekt: Expression DeleteItemRequest() is valid: false
logging: reflekt: Expression DeleteItemRequest() is valid: false
logging: reflekt: Expression DeleteItemRequest() is valid: false
logging: reflekt: Expression DeleteItemRequest is valid: false
logging: reflekt: Expression DeleteItemRequest is valid: false
logging: reflekt: Expression DeleteItemRequest is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName(tableName) is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression withTableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression tableName is valid: false
logging: reflekt: Expression withKey(mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                )) is valid: false
logging: reflekt: Expression withKey(mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                )) is valid: false
logging: reflekt: Expression withKey(mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                )) is valid: false
logging: reflekt: Expression withKey is valid: false
logging: reflekt: Expression withKey is valid: false
logging: reflekt: Expression withKey is valid: false
logging: reflekt: Expression mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                ) is valid: false
logging: reflekt: Expression mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                ) is valid: false
logging: reflekt: Expression mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                ) is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression mapOf is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression to is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue() is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression AttributeValue is valid: false
logging: reflekt: Expression apply { s = item["URLHash"]!!.s } is valid: false
logging: reflekt: Expression apply { s = item["URLHash"]!!.s } is valid: false
logging: reflekt: Expression apply { s = item["URLHash"]!!.s } is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression = is valid: false
logging: reflekt: Expression item["URLHash"] is valid: false
logging: reflekt: Expression item["URLHash"] is valid: false
logging: reflekt: Expression item["URLHash"] is valid: false
logging: reflekt: Expression item is valid: false
logging: reflekt: Expression item is valid: false
logging: reflekt: Expression item is valid: false
logging: reflekt: Expression !! is valid: false
logging: reflekt: Expression !! is valid: false
logging: reflekt: Expression !! is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression s is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression client is valid: false
logging: reflekt: Expression deleteItem(delete) is valid: false
logging: reflekt: Expression deleteItem(delete) is valid: false
logging: reflekt: Expression deleteItem(delete) is valid: false
logging: reflekt: Expression deleteItem is valid: false
logging: reflekt: Expression deleteItem is valid: false
logging: reflekt: Expression deleteItem is valid: false
logging: reflekt: Expression delete is valid: false
logging: reflekt: Expression delete is valid: false
logging: reflekt: Expression delete is valid: false
logging: reflekt: Expression logger is valid: false
logging: reflekt: Expression logger is valid: false
logging: reflekt: Expression logger is valid: false
logging: reflekt: Expression info("Ended URL storage cleanup") is valid: false
logging: reflekt: Expression info("Ended URL storage cleanup") is valid: false
logging: reflekt: Expression info("Ended URL storage cleanup") is valid: false
logging: reflekt: Expression info is valid: false
logging: reflekt: Expression info is valid: false
logging: reflekt: Expression info is valid: false
logging: reflekt: Finish analyzing file URLStorage.kt (package io.kotless.examples.storage)
logging: reflekt: Start analyzing file HTML.kt (package io.kotless.examples.utils)
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression utils is valid: false
logging: reflekt: Expression utils is valid: false
logging: reflekt: Expression utils is valid: false
logging: reflekt: Expression kotlinx is valid: false
logging: reflekt: Expression kotlinx is valid: false
logging: reflekt: Expression kotlinx is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression kotlinx is valid: false
logging: reflekt: Expression kotlinx is valid: false
logging: reflekt: Expression kotlinx is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression html is valid: false
logging: reflekt: Expression stream is valid: false
logging: reflekt: Expression stream is valid: false
logging: reflekt: Expression stream is valid: false
logging: reflekt: Expression createHTML is valid: false
logging: reflekt: Expression createHTML is valid: false
logging: reflekt: Expression createHTML is valid: false
logging: reflekt: Expression TagConsumer is valid: false
logging: reflekt: Expression TagConsumer is valid: false
logging: reflekt: Expression TagConsumer is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression Unit is valid: false
logging: reflekt: Expression Unit is valid: false
logging: reflekt: Expression Unit is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression createHTML() is valid: false
logging: reflekt: Expression createHTML() is valid: false
logging: reflekt: Expression createHTML() is valid: false
logging: reflekt: Expression createHTML is valid: false
logging: reflekt: Expression createHTML is valid: false
logging: reflekt: Expression createHTML is valid: false
logging: reflekt: Expression apply(body) is valid: false
logging: reflekt: Expression apply(body) is valid: false
logging: reflekt: Expression apply(body) is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression apply is valid: false
logging: reflekt: Expression body is valid: false
logging: reflekt: Expression body is valid: false
logging: reflekt: Expression body is valid: false
logging: reflekt: Expression finalize() is valid: false
logging: reflekt: Expression finalize() is valid: false
logging: reflekt: Expression finalize() is valid: false
logging: reflekt: Expression finalize is valid: false
logging: reflekt: Expression finalize is valid: false
logging: reflekt: Expression finalize is valid: false
logging: reflekt: Finish analyzing file HTML.kt (package io.kotless.examples.utils)
logging: reflekt: Start analyzing file RandomCode.kt (package io.kotless.examples.utils)
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression io is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression kotless is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression examples is valid: false
logging: reflekt: Expression utils is valid: false
logging: reflekt: Expression utils is valid: false
logging: reflekt: Expression utils is valid: false
logging: reflekt: Expression java is valid: false
logging: reflekt: Expression java is valid: false
logging: reflekt: Expression java is valid: false
logging: reflekt: Expression math is valid: false
logging: reflekt: Expression math is valid: false
logging: reflekt: Expression math is valid: false
logging: reflekt: Expression BigInteger is valid: false
logging: reflekt: Expression BigInteger is valid: false
logging: reflekt: Expression BigInteger is valid: false
logging: reflekt: Expression java is valid: false
logging: reflekt: Expression java is valid: false
logging: reflekt: Expression java is valid: false
logging: reflekt: Expression security is valid: false
logging: reflekt: Expression security is valid: false
logging: reflekt: Expression security is valid: false
logging: reflekt: Expression SecureRandom is valid: false
logging: reflekt: Expression SecureRandom is valid: false
logging: reflekt: Expression SecureRandom is valid: false
logging: reflekt: Expression SecureRandom() is valid: false
logging: reflekt: Expression SecureRandom() is valid: false
logging: reflekt: Expression SecureRandom() is valid: false
logging: reflekt: Expression SecureRandom is valid: false
logging: reflekt: Expression SecureRandom is valid: false
logging: reflekt: Expression SecureRandom is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression defaultLength is valid: false
logging: reflekt: Expression defaultLength is valid: false
logging: reflekt: Expression defaultLength is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression BigInteger(128, rnd) is valid: false
logging: reflekt: Expression BigInteger(128, rnd) is valid: false
logging: reflekt: Expression BigInteger(128, rnd) is valid: false
logging: reflekt: Expression BigInteger is valid: false
logging: reflekt: Expression BigInteger is valid: false
logging: reflekt: Expression BigInteger is valid: false
logging: reflekt: Expression rnd is valid: false
logging: reflekt: Expression rnd is valid: false
logging: reflekt: Expression rnd is valid: false
logging: reflekt: Expression toString(radix) is valid: false
logging: reflekt: Expression toString(radix) is valid: false
logging: reflekt: Expression toString(radix) is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression radix is valid: false
logging: reflekt: Expression radix is valid: false
logging: reflekt: Expression radix is valid: false
logging: reflekt: Expression takeLast(len) is valid: false
logging: reflekt: Expression takeLast(len) is valid: false
logging: reflekt: Expression takeLast(len) is valid: false
logging: reflekt: Expression takeLast is valid: false
logging: reflekt: Expression takeLast is valid: false
logging: reflekt: Expression takeLast is valid: false
logging: reflekt: Expression len is valid: false
logging: reflekt: Expression len is valid: false
logging: reflekt: Expression len is valid: false
logging: reflekt: Finish analyzing file RandomCode.kt (package io.kotless.examples.utils)
logging: reflekt: Getting invokes from sources has done!
logging: reflekt: Project's invokes: ReflektInvokes(objects={}, classes={}, functions={})
logging: reflekt: Merged invokes: ReflektInvokes(objects={io.kotless.dsl.app.http.RoutesDispatcher.kt=[SupertypesToAnnotations(supertypes=[io.kotless.dsl.lang.http.HttpRequestInterceptor], annotations=[])], io.kotless.dsl.Application.kt=[SupertypesToAnnotations(supertypes=[io.kotless.dsl.lang.LambdaInit], annotations=[]), SupertypesToAnnotations(supertypes=[io.kotless.dsl.lang.LambdaWarming], annotations=[])]}, classes={}, functions={io.kotless.dsl.app.events.EventsReflectionScanner.kt=[SignatureToAnnotations(signature=Function0<Unit>, annotations=[io.kotless.dsl.lang.event.Scheduled])], io.kotless.dsl.app.http.RoutesStorage.kt=[SignatureToAnnotations(signature=Function0<String>, annotations=[io.kotless.dsl.lang.http.Get])]})
logging: reflekt: Getting uses from sources....
logging: reflekt: Start analyzing file Root.kt (package io.kotless.examples.page)
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: examples, should run on false
logging: reflekt: ObjectUsesProcessor. Element: examples, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text examples, should run on false
logging: reflekt: ClassUsesProcessor. Element: page, should run on false
logging: reflekt: ObjectUsesProcessor. Element: page, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text page, should run on false
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: dsl, should run on false
logging: reflekt: ObjectUsesProcessor. Element: dsl, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text dsl, should run on false
logging: reflekt: ClassUsesProcessor. Element: lang, should run on false
logging: reflekt: ObjectUsesProcessor. Element: lang, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text lang, should run on false
logging: reflekt: ClassUsesProcessor. Element: http, should run on false
logging: reflekt: ObjectUsesProcessor. Element: http, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text http, should run on false
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: examples, should run on false
logging: reflekt: ObjectUsesProcessor. Element: examples, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text examples, should run on false
logging: reflekt: ClassUsesProcessor. Element: utils, should run on false
logging: reflekt: ObjectUsesProcessor. Element: utils, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text utils, should run on false
logging: reflekt: ClassUsesProcessor. Element: html, should run on false
logging: reflekt: ObjectUsesProcessor. Element: html, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text html, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotlinx, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotlinx, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotlinx, should run on false
logging: reflekt: ClassUsesProcessor. Element: html, should run on false
logging: reflekt: ObjectUsesProcessor. Element: html, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text html, should run on false
logging: reflekt: ClassUsesProcessor. Element: @Get("/")
fun root() = html {
    head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    }
    body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    }
}, should run on false
logging: reflekt: ObjectUsesProcessor. Element: @Get("/")
fun root() = html {
    head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    }
    body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    }
}, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @Get("/")
fun root() = html {
    head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    }
    body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    }
}, should run on true
logging: reflekt: ClassUsesProcessor. Element: Get, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Get, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Get, should run on false
logging: reflekt: ClassUsesProcessor. Element: html {
    head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    }
    body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    }
}, should run on false
logging: reflekt: ObjectUsesProcessor. Element: html {
    head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    }
    body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    }
}, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text html {
    head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    }
    body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    }
}, should run on false
logging: reflekt: ClassUsesProcessor. Element: html, should run on false
logging: reflekt: ObjectUsesProcessor. Element: html, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text html, should run on false
logging: reflekt: ClassUsesProcessor. Element: head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    }, should run on false
logging: reflekt: ClassUsesProcessor. Element: head, should run on false
logging: reflekt: ObjectUsesProcessor. Element: head, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text head, should run on false
logging: reflekt: ClassUsesProcessor. Element: title {
            +"Shortless"
        }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: title {
            +"Shortless"
        }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text title {
            +"Shortless"
        }, should run on false
logging: reflekt: ClassUsesProcessor. Element: title, should run on false
logging: reflekt: ObjectUsesProcessor. Element: title, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text title, should run on false
logging: reflekt: ClassUsesProcessor. Element: +, should run on false
logging: reflekt: ObjectUsesProcessor. Element: +, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text +, should run on false
logging: reflekt: ClassUsesProcessor. Element: link {
            href = ::faviconIco.href
            rel = "icon"
        }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: link {
            href = ::faviconIco.href
            rel = "icon"
        }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text link {
            href = ::faviconIco.href
            rel = "icon"
        }, should run on false
logging: reflekt: ClassUsesProcessor. Element: link, should run on false
logging: reflekt: ObjectUsesProcessor. Element: link, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text link, should run on false
logging: reflekt: ClassUsesProcessor. Element: href, should run on false
logging: reflekt: ObjectUsesProcessor. Element: href, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text href, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: faviconIco, should run on false
logging: reflekt: ObjectUsesProcessor. Element: faviconIco, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text faviconIco, should run on false
logging: reflekt: ClassUsesProcessor. Element: href, should run on false
logging: reflekt: ObjectUsesProcessor. Element: href, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text href, should run on false
logging: reflekt: ClassUsesProcessor. Element: rel, should run on false
logging: reflekt: ObjectUsesProcessor. Element: rel, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text rel, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }, should run on false
logging: reflekt: ClassUsesProcessor. Element: link, should run on false
logging: reflekt: ObjectUsesProcessor. Element: link, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text link, should run on false
logging: reflekt: ClassUsesProcessor. Element: href, should run on false
logging: reflekt: ObjectUsesProcessor. Element: href, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text href, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: rel, should run on false
logging: reflekt: ObjectUsesProcessor. Element: rel, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text rel, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }, should run on false
logging: reflekt: ClassUsesProcessor. Element: link, should run on false
logging: reflekt: ObjectUsesProcessor. Element: link, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text link, should run on false
logging: reflekt: ClassUsesProcessor. Element: href, should run on false
logging: reflekt: ObjectUsesProcessor. Element: href, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text href, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: rel, should run on false
logging: reflekt: ObjectUsesProcessor. Element: rel, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text rel, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: link {
            href = ::siteCss.href
            rel = "stylesheet"
        }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: link {
            href = ::siteCss.href
            rel = "stylesheet"
        }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text link {
            href = ::siteCss.href
            rel = "stylesheet"
        }, should run on false
logging: reflekt: ClassUsesProcessor. Element: link, should run on false
logging: reflekt: ObjectUsesProcessor. Element: link, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text link, should run on false
logging: reflekt: ClassUsesProcessor. Element: href, should run on false
logging: reflekt: ObjectUsesProcessor. Element: href, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text href, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: siteCss, should run on false
logging: reflekt: ObjectUsesProcessor. Element: siteCss, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text siteCss, should run on false
logging: reflekt: ClassUsesProcessor. Element: href, should run on false
logging: reflekt: ObjectUsesProcessor. Element: href, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text href, should run on false
logging: reflekt: ClassUsesProcessor. Element: rel, should run on false
logging: reflekt: ObjectUsesProcessor. Element: rel, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text rel, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: script { src = ::siteJs.href }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: script { src = ::siteJs.href }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text script { src = ::siteJs.href }, should run on false
logging: reflekt: ClassUsesProcessor. Element: script, should run on false
logging: reflekt: ObjectUsesProcessor. Element: script, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text script, should run on false
logging: reflekt: ClassUsesProcessor. Element: src, should run on false
logging: reflekt: ObjectUsesProcessor. Element: src, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text src, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: siteJs, should run on false
logging: reflekt: ObjectUsesProcessor. Element: siteJs, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text siteJs, should run on false
logging: reflekt: ClassUsesProcessor. Element: href, should run on false
logging: reflekt: ObjectUsesProcessor. Element: href, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text href, should run on false
logging: reflekt: ClassUsesProcessor. Element: body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    }, should run on false
logging: reflekt: ClassUsesProcessor. Element: body, should run on false
logging: reflekt: ObjectUsesProcessor. Element: body, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text body, should run on false
logging: reflekt: ClassUsesProcessor. Element: div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }, should run on false
logging: reflekt: ClassUsesProcessor. Element: div, should run on false
logging: reflekt: ObjectUsesProcessor. Element: div, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text div, should run on false
logging: reflekt: ClassUsesProcessor. Element: input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }, should run on false
logging: reflekt: ClassUsesProcessor. Element: input, should run on false
logging: reflekt: ObjectUsesProcessor. Element: input, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text input, should run on false
logging: reflekt: ClassUsesProcessor. Element: id, should run on false
logging: reflekt: ObjectUsesProcessor. Element: id, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text id, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: classes, should run on false
logging: reflekt: ObjectUsesProcessor. Element: classes, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text classes, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: setOf("url-input"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: setOf("url-input"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text setOf("url-input"), should run on false
logging: reflekt: ClassUsesProcessor. Element: setOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: setOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text setOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: type, should run on false
logging: reflekt: ObjectUsesProcessor. Element: type, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text type, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: InputType, should run on false
logging: reflekt: ObjectUsesProcessor. Element: InputType, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text InputType, should run on false
logging: reflekt: ClassUsesProcessor. Element: url, should run on false
logging: reflekt: ObjectUsesProcessor. Element: url, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text url, should run on false
logging: reflekt: ClassUsesProcessor. Element: placeholder, should run on false
logging: reflekt: ObjectUsesProcessor. Element: placeholder, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text placeholder, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }, should run on false
logging: reflekt: ClassUsesProcessor. Element: button, should run on false
logging: reflekt: ObjectUsesProcessor. Element: button, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text button, should run on false
logging: reflekt: ClassUsesProcessor. Element: id, should run on false
logging: reflekt: ObjectUsesProcessor. Element: id, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text id, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: classes, should run on false
logging: reflekt: ObjectUsesProcessor. Element: classes, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text classes, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: setOf("url-button"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: setOf("url-button"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text setOf("url-button"), should run on false
logging: reflekt: ClassUsesProcessor. Element: setOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: setOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text setOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: type, should run on false
logging: reflekt: ObjectUsesProcessor. Element: type, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text type, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: ButtonType, should run on false
logging: reflekt: ObjectUsesProcessor. Element: ButtonType, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text ButtonType, should run on false
logging: reflekt: ClassUsesProcessor. Element: submit, should run on false
logging: reflekt: ObjectUsesProcessor. Element: submit, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text submit, should run on false
logging: reflekt: ClassUsesProcessor. Element: span {
                    id = "shorten-button-text"
                    +"Go!"
                }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: span {
                    id = "shorten-button-text"
                    +"Go!"
                }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text span {
                    id = "shorten-button-text"
                    +"Go!"
                }, should run on false
logging: reflekt: ClassUsesProcessor. Element: span, should run on false
logging: reflekt: ObjectUsesProcessor. Element: span, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text span, should run on false
logging: reflekt: ClassUsesProcessor. Element: id, should run on false
logging: reflekt: ObjectUsesProcessor. Element: id, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text id, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: +, should run on false
logging: reflekt: ObjectUsesProcessor. Element: +, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text +, should run on false
logging: reflekt: ClassUsesProcessor. Element: div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }, should run on false
logging: reflekt: ClassUsesProcessor. Element: div, should run on false
logging: reflekt: ObjectUsesProcessor. Element: div, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text div, should run on false
logging: reflekt: ClassUsesProcessor. Element: span("footer-text") {
                +"Shortless"
            }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: span("footer-text") {
                +"Shortless"
            }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text span("footer-text") {
                +"Shortless"
            }, should run on false
logging: reflekt: ClassUsesProcessor. Element: span, should run on false
logging: reflekt: ObjectUsesProcessor. Element: span, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text span, should run on false
logging: reflekt: ClassUsesProcessor. Element: +, should run on false
logging: reflekt: ObjectUsesProcessor. Element: +, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text +, should run on false
logging: reflekt: ClassUsesProcessor. Element: span("footer-muted-text") {
                +"Powered by Kotless"
            }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: span("footer-muted-text") {
                +"Powered by Kotless"
            }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text span("footer-muted-text") {
                +"Powered by Kotless"
            }, should run on false
logging: reflekt: ClassUsesProcessor. Element: span, should run on false
logging: reflekt: ObjectUsesProcessor. Element: span, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text span, should run on false
logging: reflekt: ClassUsesProcessor. Element: +, should run on false
logging: reflekt: ObjectUsesProcessor. Element: +, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text +, should run on false
logging: reflekt: Finish analyzing file Root.kt (package io.kotless.examples.page)
logging: reflekt: Start analyzing file Shortener.kt (package io.kotless.examples.page)
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: examples, should run on false
logging: reflekt: ObjectUsesProcessor. Element: examples, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text examples, should run on false
logging: reflekt: ClassUsesProcessor. Element: page, should run on false
logging: reflekt: ObjectUsesProcessor. Element: page, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text page, should run on false
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: dsl, should run on false
logging: reflekt: ObjectUsesProcessor. Element: dsl, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text dsl, should run on false
logging: reflekt: ClassUsesProcessor. Element: lang, should run on false
logging: reflekt: ObjectUsesProcessor. Element: lang, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text lang, should run on false
logging: reflekt: ClassUsesProcessor. Element: http, should run on false
logging: reflekt: ObjectUsesProcessor. Element: http, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text http, should run on false
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: dsl, should run on false
logging: reflekt: ObjectUsesProcessor. Element: dsl, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text dsl, should run on false
logging: reflekt: ClassUsesProcessor. Element: model, should run on false
logging: reflekt: ObjectUsesProcessor. Element: model, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text model, should run on false
logging: reflekt: ClassUsesProcessor. Element: HttpResponse, should run on false
logging: reflekt: ObjectUsesProcessor. Element: HttpResponse, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text HttpResponse, should run on false
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: examples, should run on false
logging: reflekt: ObjectUsesProcessor. Element: examples, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text examples, should run on false
logging: reflekt: ClassUsesProcessor. Element: storage, should run on false
logging: reflekt: ObjectUsesProcessor. Element: storage, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text storage, should run on false
logging: reflekt: ClassUsesProcessor. Element: URLStorage, should run on false
logging: reflekt: ObjectUsesProcessor. Element: URLStorage, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text URLStorage, should run on false
logging: reflekt: ClassUsesProcessor. Element: org, should run on false
logging: reflekt: ObjectUsesProcessor. Element: org, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text org, should run on false
logging: reflekt: ClassUsesProcessor. Element: apache, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apache, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text apache, should run on false
logging: reflekt: ClassUsesProcessor. Element: commons, should run on false
logging: reflekt: ObjectUsesProcessor. Element: commons, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text commons, should run on false
logging: reflekt: ClassUsesProcessor. Element: validator, should run on false
logging: reflekt: ObjectUsesProcessor. Element: validator, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text validator, should run on false
logging: reflekt: ClassUsesProcessor. Element: routines, should run on false
logging: reflekt: ObjectUsesProcessor. Element: routines, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text routines, should run on false
logging: reflekt: ClassUsesProcessor. Element: UrlValidator, should run on false
logging: reflekt: ObjectUsesProcessor. Element: UrlValidator, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text UrlValidator, should run on false
logging: reflekt: ClassUsesProcessor. Element: org, should run on false
logging: reflekt: ObjectUsesProcessor. Element: org, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text org, should run on false
logging: reflekt: ClassUsesProcessor. Element: slf4j, should run on false
logging: reflekt: ObjectUsesProcessor. Element: slf4j, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text slf4j, should run on false
logging: reflekt: ClassUsesProcessor. Element: LoggerFactory, should run on false
logging: reflekt: ObjectUsesProcessor. Element: LoggerFactory, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text LoggerFactory, should run on false
logging: reflekt: ClassUsesProcessor. Element: @Get("/r")
fun redirectUrl(k: String): HttpResponse {
    val url = URLStorage.getByCode(k)
    return if (url == null) {
        notFound("Unknown short URL")
    } else {
        redirect(url)
    }
}, should run on false
logging: reflekt: ObjectUsesProcessor. Element: @Get("/r")
fun redirectUrl(k: String): HttpResponse {
    val url = URLStorage.getByCode(k)
    return if (url == null) {
        notFound("Unknown short URL")
    } else {
        redirect(url)
    }
}, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @Get("/r")
fun redirectUrl(k: String): HttpResponse {
    val url = URLStorage.getByCode(k)
    return if (url == null) {
        notFound("Unknown short URL")
    } else {
        redirect(url)
    }
}, should run on true
logging: reflekt: ClassUsesProcessor. Element: Get, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Get, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Get, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: HttpResponse, should run on false
logging: reflekt: ObjectUsesProcessor. Element: HttpResponse, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text HttpResponse, should run on false
logging: reflekt: ClassUsesProcessor. Element: URLStorage, should run on false
logging: reflekt: ObjectUsesProcessor. Element: URLStorage, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text URLStorage, should run on false
logging: reflekt: ClassUsesProcessor. Element: getByCode(k), should run on false
logging: reflekt: ObjectUsesProcessor. Element: getByCode(k), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text getByCode(k), should run on false
logging: reflekt: ClassUsesProcessor. Element: getByCode, should run on false
logging: reflekt: ObjectUsesProcessor. Element: getByCode, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text getByCode, should run on false
logging: reflekt: ClassUsesProcessor. Element: k, should run on false
logging: reflekt: ObjectUsesProcessor. Element: k, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text k, should run on false
logging: reflekt: ClassUsesProcessor. Element: url, should run on false
logging: reflekt: ObjectUsesProcessor. Element: url, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text url, should run on false
logging: reflekt: ClassUsesProcessor. Element: ==, should run on false
logging: reflekt: ObjectUsesProcessor. Element: ==, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text ==, should run on false
logging: reflekt: ClassUsesProcessor. Element: notFound("Unknown short URL"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: notFound("Unknown short URL"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text notFound("Unknown short URL"), should run on false
logging: reflekt: ClassUsesProcessor. Element: notFound, should run on false
logging: reflekt: ObjectUsesProcessor. Element: notFound, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text notFound, should run on false
logging: reflekt: ClassUsesProcessor. Element: redirect(url), should run on false
logging: reflekt: ObjectUsesProcessor. Element: redirect(url), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text redirect(url), should run on false
logging: reflekt: ClassUsesProcessor. Element: redirect, should run on false
logging: reflekt: ObjectUsesProcessor. Element: redirect, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text redirect, should run on false
logging: reflekt: ClassUsesProcessor. Element: url, should run on false
logging: reflekt: ObjectUsesProcessor. Element: url, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text url, should run on false
logging: reflekt: ClassUsesProcessor. Element: LoggerFactory, should run on false
logging: reflekt: ObjectUsesProcessor. Element: LoggerFactory, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text LoggerFactory, should run on false
logging: reflekt: ClassUsesProcessor. Element: getLogger("ShortenerKt"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: getLogger("ShortenerKt"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text getLogger("ShortenerKt"), should run on false
logging: reflekt: ClassUsesProcessor. Element: getLogger, should run on false
logging: reflekt: ObjectUsesProcessor. Element: getLogger, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text getLogger, should run on false
logging: reflekt: ClassUsesProcessor. Element: @Get("/shorten")
fun shorten(value: String): String {
    logger.info("URL for shortening $value")

    val url = if (value.contains("://").not()) "https://$value" else value

    if (UrlValidator.getInstance().isValid(url).not()) {
        return "Non valid URL"
    }

    val code = URLStorage.getByUrl(url) ?: URLStorage.createCode(url)

    return "https://short.kotless.io${::redirectUrl.href(code)}"
}, should run on false
logging: reflekt: ObjectUsesProcessor. Element: @Get("/shorten")
fun shorten(value: String): String {
    logger.info("URL for shortening $value")

    val url = if (value.contains("://").not()) "https://$value" else value

    if (UrlValidator.getInstance().isValid(url).not()) {
        return "Non valid URL"
    }

    val code = URLStorage.getByUrl(url) ?: URLStorage.createCode(url)

    return "https://short.kotless.io${::redirectUrl.href(code)}"
}, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @Get("/shorten")
fun shorten(value: String): String {
    logger.info("URL for shortening $value")

    val url = if (value.contains("://").not()) "https://$value" else value

    if (UrlValidator.getInstance().isValid(url).not()) {
        return "Non valid URL"
    }

    val code = URLStorage.getByUrl(url) ?: URLStorage.createCode(url)

    return "https://short.kotless.io${::redirectUrl.href(code)}"
}, should run on true
logging: reflekt: ClassUsesProcessor. Element: Get, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Get, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Get, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: logger, should run on false
logging: reflekt: ObjectUsesProcessor. Element: logger, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text logger, should run on false
logging: reflekt: ClassUsesProcessor. Element: info("URL for shortening $value"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: info("URL for shortening $value"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text info("URL for shortening $value"), should run on false
logging: reflekt: ClassUsesProcessor. Element: info, should run on false
logging: reflekt: ObjectUsesProcessor. Element: info, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text info, should run on false
logging: reflekt: ClassUsesProcessor. Element: value, should run on false
logging: reflekt: ObjectUsesProcessor. Element: value, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text value, should run on false
logging: reflekt: ClassUsesProcessor. Element: value, should run on false
logging: reflekt: ObjectUsesProcessor. Element: value, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text value, should run on false
logging: reflekt: ClassUsesProcessor. Element: contains("://"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: contains("://"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text contains("://"), should run on false
logging: reflekt: ClassUsesProcessor. Element: contains, should run on false
logging: reflekt: ObjectUsesProcessor. Element: contains, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text contains, should run on false
logging: reflekt: ClassUsesProcessor. Element: not(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: not(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text not(), should run on false
logging: reflekt: ClassUsesProcessor. Element: not, should run on false
logging: reflekt: ObjectUsesProcessor. Element: not, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text not, should run on false
logging: reflekt: ClassUsesProcessor. Element: value, should run on false
logging: reflekt: ObjectUsesProcessor. Element: value, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text value, should run on false
logging: reflekt: ClassUsesProcessor. Element: value, should run on false
logging: reflekt: ObjectUsesProcessor. Element: value, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text value, should run on false
logging: reflekt: ClassUsesProcessor. Element: UrlValidator, should run on false
logging: reflekt: ObjectUsesProcessor. Element: UrlValidator, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text UrlValidator, should run on false
logging: reflekt: ClassUsesProcessor. Element: getInstance(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: getInstance(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text getInstance(), should run on false
logging: reflekt: ClassUsesProcessor. Element: getInstance, should run on false
logging: reflekt: ObjectUsesProcessor. Element: getInstance, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text getInstance, should run on false
logging: reflekt: ClassUsesProcessor. Element: isValid(url), should run on false
logging: reflekt: ObjectUsesProcessor. Element: isValid(url), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text isValid(url), should run on false
logging: reflekt: ClassUsesProcessor. Element: isValid, should run on false
logging: reflekt: ObjectUsesProcessor. Element: isValid, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text isValid, should run on false
logging: reflekt: ClassUsesProcessor. Element: url, should run on false
logging: reflekt: ObjectUsesProcessor. Element: url, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text url, should run on false
logging: reflekt: ClassUsesProcessor. Element: not(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: not(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text not(), should run on false
logging: reflekt: ClassUsesProcessor. Element: not, should run on false
logging: reflekt: ObjectUsesProcessor. Element: not, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text not, should run on false
logging: reflekt: ClassUsesProcessor. Element: URLStorage, should run on false
logging: reflekt: ObjectUsesProcessor. Element: URLStorage, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text URLStorage, should run on false
logging: reflekt: ClassUsesProcessor. Element: getByUrl(url), should run on false
logging: reflekt: ObjectUsesProcessor. Element: getByUrl(url), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text getByUrl(url), should run on false
logging: reflekt: ClassUsesProcessor. Element: getByUrl, should run on false
logging: reflekt: ObjectUsesProcessor. Element: getByUrl, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text getByUrl, should run on false
logging: reflekt: ClassUsesProcessor. Element: url, should run on false
logging: reflekt: ObjectUsesProcessor. Element: url, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text url, should run on false
logging: reflekt: ClassUsesProcessor. Element: ?:, should run on false
logging: reflekt: ObjectUsesProcessor. Element: ?:, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text ?:, should run on false
logging: reflekt: ClassUsesProcessor. Element: URLStorage, should run on false
logging: reflekt: ObjectUsesProcessor. Element: URLStorage, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text URLStorage, should run on false
logging: reflekt: ClassUsesProcessor. Element: createCode(url), should run on false
logging: reflekt: ObjectUsesProcessor. Element: createCode(url), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text createCode(url), should run on false
logging: reflekt: ClassUsesProcessor. Element: createCode, should run on false
logging: reflekt: ObjectUsesProcessor. Element: createCode, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text createCode, should run on false
logging: reflekt: ClassUsesProcessor. Element: url, should run on false
logging: reflekt: ObjectUsesProcessor. Element: url, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text url, should run on false
logging: reflekt: ClassUsesProcessor. Element: redirectUrl, should run on false
logging: reflekt: ObjectUsesProcessor. Element: redirectUrl, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text redirectUrl, should run on false
logging: reflekt: ClassUsesProcessor. Element: href(code), should run on false
logging: reflekt: ObjectUsesProcessor. Element: href(code), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text href(code), should run on false
logging: reflekt: ClassUsesProcessor. Element: href, should run on false
logging: reflekt: ObjectUsesProcessor. Element: href, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text href, should run on false
logging: reflekt: ClassUsesProcessor. Element: code, should run on false
logging: reflekt: ObjectUsesProcessor. Element: code, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text code, should run on false
logging: reflekt: Finish analyzing file Shortener.kt (package io.kotless.examples.page)
logging: reflekt: Start analyzing file Statics.kt (package io.kotless.examples.page)
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: examples, should run on false
logging: reflekt: ObjectUsesProcessor. Element: examples, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text examples, should run on false
logging: reflekt: ClassUsesProcessor. Element: page, should run on false
logging: reflekt: ObjectUsesProcessor. Element: page, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text page, should run on false
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: MimeType, should run on false
logging: reflekt: ObjectUsesProcessor. Element: MimeType, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text MimeType, should run on false
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: dsl, should run on false
logging: reflekt: ObjectUsesProcessor. Element: dsl, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text dsl, should run on false
logging: reflekt: ClassUsesProcessor. Element: lang, should run on false
logging: reflekt: ObjectUsesProcessor. Element: lang, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text lang, should run on false
logging: reflekt: ClassUsesProcessor. Element: http, should run on false
logging: reflekt: ObjectUsesProcessor. Element: http, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text http, should run on false
logging: reflekt: ClassUsesProcessor. Element: StaticGet, should run on false
logging: reflekt: ObjectUsesProcessor. Element: StaticGet, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text StaticGet, should run on false
logging: reflekt: ClassUsesProcessor. Element: java, should run on false
logging: reflekt: ObjectUsesProcessor. Element: java, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text java, should run on false
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: File, should run on false
logging: reflekt: ObjectUsesProcessor. Element: File, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text File, should run on false
logging: reflekt: ClassUsesProcessor. Element: StaticGet, should run on false
logging: reflekt: ObjectUsesProcessor. Element: StaticGet, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text StaticGet, should run on false
logging: reflekt: ClassUsesProcessor. Element: MimeType, should run on false
logging: reflekt: ObjectUsesProcessor. Element: MimeType, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text MimeType, should run on false
logging: reflekt: ClassUsesProcessor. Element: CSS, should run on false
logging: reflekt: ObjectUsesProcessor. Element: CSS, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text CSS, should run on false
logging: reflekt: ClassUsesProcessor. Element: File("css/shortener.css"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: File("css/shortener.css"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text File("css/shortener.css"), should run on false
logging: reflekt: ClassUsesProcessor. Element: File, should run on false
logging: reflekt: ObjectUsesProcessor. Element: File, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text File, should run on false
logging: reflekt: ClassUsesProcessor. Element: StaticGet, should run on false
logging: reflekt: ObjectUsesProcessor. Element: StaticGet, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text StaticGet, should run on false
logging: reflekt: ClassUsesProcessor. Element: MimeType, should run on false
logging: reflekt: ObjectUsesProcessor. Element: MimeType, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text MimeType, should run on false
logging: reflekt: ClassUsesProcessor. Element: JS, should run on false
logging: reflekt: ObjectUsesProcessor. Element: JS, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text JS, should run on false
logging: reflekt: ClassUsesProcessor. Element: File("js/shortener.js"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: File("js/shortener.js"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text File("js/shortener.js"), should run on false
logging: reflekt: ClassUsesProcessor. Element: File, should run on false
logging: reflekt: ObjectUsesProcessor. Element: File, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text File, should run on false
logging: reflekt: ClassUsesProcessor. Element: StaticGet, should run on false
logging: reflekt: ObjectUsesProcessor. Element: StaticGet, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text StaticGet, should run on false
logging: reflekt: ClassUsesProcessor. Element: MimeType, should run on false
logging: reflekt: ObjectUsesProcessor. Element: MimeType, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text MimeType, should run on false
logging: reflekt: ClassUsesProcessor. Element: APNG, should run on false
logging: reflekt: ObjectUsesProcessor. Element: APNG, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text APNG, should run on false
logging: reflekt: ClassUsesProcessor. Element: File("favicon.apng"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: File("favicon.apng"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text File("favicon.apng"), should run on false
logging: reflekt: ClassUsesProcessor. Element: File, should run on false
logging: reflekt: ObjectUsesProcessor. Element: File, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text File, should run on false
logging: reflekt: Finish analyzing file Statics.kt (package io.kotless.examples.page)
logging: reflekt: Start analyzing file URLStorage.kt (package io.kotless.examples.storage)
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: examples, should run on false
logging: reflekt: ObjectUsesProcessor. Element: examples, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text examples, should run on false
logging: reflekt: ClassUsesProcessor. Element: storage, should run on false
logging: reflekt: ObjectUsesProcessor. Element: storage, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text storage, should run on false
logging: reflekt: ClassUsesProcessor. Element: com, should run on false
logging: reflekt: ObjectUsesProcessor. Element: com, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text com, should run on false
logging: reflekt: ClassUsesProcessor. Element: amazonaws, should run on false
logging: reflekt: ObjectUsesProcessor. Element: amazonaws, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text amazonaws, should run on false
logging: reflekt: ClassUsesProcessor. Element: services, should run on false
logging: reflekt: ObjectUsesProcessor. Element: services, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text services, should run on false
logging: reflekt: ClassUsesProcessor. Element: dynamodbv2, should run on false
logging: reflekt: ObjectUsesProcessor. Element: dynamodbv2, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text dynamodbv2, should run on false
logging: reflekt: ClassUsesProcessor. Element: AmazonDynamoDBClientBuilder, should run on false
logging: reflekt: ObjectUsesProcessor. Element: AmazonDynamoDBClientBuilder, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text AmazonDynamoDBClientBuilder, should run on false
logging: reflekt: ClassUsesProcessor. Element: com, should run on false
logging: reflekt: ObjectUsesProcessor. Element: com, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text com, should run on false
logging: reflekt: ClassUsesProcessor. Element: amazonaws, should run on false
logging: reflekt: ObjectUsesProcessor. Element: amazonaws, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text amazonaws, should run on false
logging: reflekt: ClassUsesProcessor. Element: services, should run on false
logging: reflekt: ObjectUsesProcessor. Element: services, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text services, should run on false
logging: reflekt: ClassUsesProcessor. Element: dynamodbv2, should run on false
logging: reflekt: ObjectUsesProcessor. Element: dynamodbv2, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text dynamodbv2, should run on false
logging: reflekt: ClassUsesProcessor. Element: model, should run on false
logging: reflekt: ObjectUsesProcessor. Element: model, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text model, should run on false
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: AwsResource, should run on false
logging: reflekt: ObjectUsesProcessor. Element: AwsResource, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text AwsResource, should run on false
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: PermissionLevel, should run on false
logging: reflekt: ObjectUsesProcessor. Element: PermissionLevel, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text PermissionLevel, should run on false
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: dsl, should run on false
logging: reflekt: ObjectUsesProcessor. Element: dsl, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text dsl, should run on false
logging: reflekt: ClassUsesProcessor. Element: lang, should run on false
logging: reflekt: ObjectUsesProcessor. Element: lang, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text lang, should run on false
logging: reflekt: ClassUsesProcessor. Element: DynamoDBTable, should run on false
logging: reflekt: ObjectUsesProcessor. Element: DynamoDBTable, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text DynamoDBTable, should run on false
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: dsl, should run on false
logging: reflekt: ObjectUsesProcessor. Element: dsl, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text dsl, should run on false
logging: reflekt: ClassUsesProcessor. Element: lang, should run on false
logging: reflekt: ObjectUsesProcessor. Element: lang, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text lang, should run on false
logging: reflekt: ClassUsesProcessor. Element: event, should run on false
logging: reflekt: ObjectUsesProcessor. Element: event, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text event, should run on false
logging: reflekt: ClassUsesProcessor. Element: Scheduled, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Scheduled, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Scheduled, should run on false
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: dsl, should run on false
logging: reflekt: ObjectUsesProcessor. Element: dsl, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text dsl, should run on false
logging: reflekt: ClassUsesProcessor. Element: lang, should run on false
logging: reflekt: ObjectUsesProcessor. Element: lang, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text lang, should run on false
logging: reflekt: ClassUsesProcessor. Element: withKotlessLocal, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withKotlessLocal, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withKotlessLocal, should run on false
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: examples, should run on false
logging: reflekt: ObjectUsesProcessor. Element: examples, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text examples, should run on false
logging: reflekt: ClassUsesProcessor. Element: utils, should run on false
logging: reflekt: ObjectUsesProcessor. Element: utils, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text utils, should run on false
logging: reflekt: ClassUsesProcessor. Element: RandomCode, should run on false
logging: reflekt: ObjectUsesProcessor. Element: RandomCode, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text RandomCode, should run on false
logging: reflekt: ClassUsesProcessor. Element: org, should run on false
logging: reflekt: ObjectUsesProcessor. Element: org, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text org, should run on false
logging: reflekt: ClassUsesProcessor. Element: slf4j, should run on false
logging: reflekt: ObjectUsesProcessor. Element: slf4j, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text slf4j, should run on false
logging: reflekt: ClassUsesProcessor. Element: LoggerFactory, should run on false
logging: reflekt: ObjectUsesProcessor. Element: LoggerFactory, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text LoggerFactory, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: @DynamoDBTable(tableName, PermissionLevel.ReadWrite)
object URLStorage {

    private val logger = LoggerFactory.getLogger(URLStorage::class.java)

    private val client = AmazonDynamoDBClientBuilder.standard().withKotlessLocal(AwsResource.DynamoDB).build()

    fun getByCode(code: String): String? {
        val req = GetItemRequest().withKey(mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        )).withTableName(tableName)

        val res = client.getItem(req).item

        return res?.let { it["URL"]!!.s }
    }

    fun getByUrl(url: String): String? {
        val req = ScanRequest()
            .withTableName(tableName)
            .withFilterExpression("#u = :v_url")
            .withExpressionAttributeNames(mapOf("#u" to "URL"))
            .withExpressionAttributeValues(mapOf(":v_url" to AttributeValue().apply { s = url }))

        val items = client.scan(req)

        return items.items.firstOrNull()?.get("URLHash")?.s
    }

    fun createCode(url: String): String {
        val code = RandomCode.next()

        val values = mapOf(
            "URLHash" to AttributeValue().apply { s = code },
            "URL" to AttributeValue().apply { s = url },
            "TimeStamp" to AttributeValue().apply { n = System.currentTimeMillis().toString() }
        )

        val req = PutItemRequest().withItem(values).withTableName(tableName)

        client.putItem(req)

        return code
    }


    @Scheduled(Scheduled.everyHour)
    private fun storageCleanup() {
        logger.info("Starting URL storage cleanup")

        //Save URLs only for three hours
        val limitMillis = System.currentTimeMillis() - 3 * 60 * 60 * 1000
        val req = ScanRequest()
            .withTableName(tableName)
            .withFilterExpression("#t < :t_time")
            .withExpressionAttributeNames(mapOf("#t" to "TimeStamp"))
            .withExpressionAttributeValues(mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() }))

        val items = client.scan(req)

        logger.info("Cleaning ${items.count} too old items at storage")

        for (item in items.items) {
            val delete = DeleteItemRequest()
                .withTableName(tableName)
                .withKey(mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                ))

            client.deleteItem(delete)
        }

        logger.info("Ended URL storage cleanup")
    }
}, should run on false
logging: reflekt: ObjectUsesProcessor. Element: @DynamoDBTable(tableName, PermissionLevel.ReadWrite)
object URLStorage {

    private val logger = LoggerFactory.getLogger(URLStorage::class.java)

    private val client = AmazonDynamoDBClientBuilder.standard().withKotlessLocal(AwsResource.DynamoDB).build()

    fun getByCode(code: String): String? {
        val req = GetItemRequest().withKey(mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        )).withTableName(tableName)

        val res = client.getItem(req).item

        return res?.let { it["URL"]!!.s }
    }

    fun getByUrl(url: String): String? {
        val req = ScanRequest()
            .withTableName(tableName)
            .withFilterExpression("#u = :v_url")
            .withExpressionAttributeNames(mapOf("#u" to "URL"))
            .withExpressionAttributeValues(mapOf(":v_url" to AttributeValue().apply { s = url }))

        val items = client.scan(req)

        return items.items.firstOrNull()?.get("URLHash")?.s
    }

    fun createCode(url: String): String {
        val code = RandomCode.next()

        val values = mapOf(
            "URLHash" to AttributeValue().apply { s = code },
            "URL" to AttributeValue().apply { s = url },
            "TimeStamp" to AttributeValue().apply { n = System.currentTimeMillis().toString() }
        )

        val req = PutItemRequest().withItem(values).withTableName(tableName)

        client.putItem(req)

        return code
    }


    @Scheduled(Scheduled.everyHour)
    private fun storageCleanup() {
        logger.info("Starting URL storage cleanup")

        //Save URLs only for three hours
        val limitMillis = System.currentTimeMillis() - 3 * 60 * 60 * 1000
        val req = ScanRequest()
            .withTableName(tableName)
            .withFilterExpression("#t < :t_time")
            .withExpressionAttributeNames(mapOf("#t" to "TimeStamp"))
            .withExpressionAttributeValues(mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() }))

        val items = client.scan(req)

        logger.info("Cleaning ${items.count} too old items at storage")

        for (item in items.items) {
            val delete = DeleteItemRequest()
                .withTableName(tableName)
                .withKey(mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                ))

            client.deleteItem(delete)
        }

        logger.info("Ended URL storage cleanup")
    }
}, should run on true
logging: reflekt: FunctionUsesProcessor. Element: OBJECT_DECLARATION with text @DynamoDBTable(tableName, PermissionLevel.ReadWrite)
object URLStorage {

    private val logger = LoggerFactory.getLogger(URLStorage::class.java)

    private val client = AmazonDynamoDBClientBuilder.standard().withKotlessLocal(AwsResource.DynamoDB).build()

    fun getByCode(code: String): String? {
        val req = GetItemRequest().withKey(mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        )).withTableName(tableName)

        val res = client.getItem(req).item

        return res?.let { it["URL"]!!.s }
    }

    fun getByUrl(url: String): String? {
        val req = ScanRequest()
            .withTableName(tableName)
            .withFilterExpression("#u = :v_url")
            .withExpressionAttributeNames(mapOf("#u" to "URL"))
            .withExpressionAttributeValues(mapOf(":v_url" to AttributeValue().apply { s = url }))

        val items = client.scan(req)

        return items.items.firstOrNull()?.get("URLHash")?.s
    }

    fun createCode(url: String): String {
        val code = RandomCode.next()

        val values = mapOf(
            "URLHash" to AttributeValue().apply { s = code },
            "URL" to AttributeValue().apply { s = url },
            "TimeStamp" to AttributeValue().apply { n = System.currentTimeMillis().toString() }
        )

        val req = PutItemRequest().withItem(values).withTableName(tableName)

        client.putItem(req)

        return code
    }


    @Scheduled(Scheduled.everyHour)
    private fun storageCleanup() {
        logger.info("Starting URL storage cleanup")

        //Save URLs only for three hours
        val limitMillis = System.currentTimeMillis() - 3 * 60 * 60 * 1000
        val req = ScanRequest()
            .withTableName(tableName)
            .withFilterExpression("#t < :t_time")
            .withExpressionAttributeNames(mapOf("#t" to "TimeStamp"))
            .withExpressionAttributeValues(mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() }))

        val items = client.scan(req)

        logger.info("Cleaning ${items.count} too old items at storage")

        for (item in items.items) {
            val delete = DeleteItemRequest()
                .withTableName(tableName)
                .withKey(mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                ))

            client.deleteItem(delete)
        }

        logger.info("Ended URL storage cleanup")
    }
}, should run on false
logging: reflekt: ClassUsesProcessor. Element: DynamoDBTable, should run on false
logging: reflekt: ObjectUsesProcessor. Element: DynamoDBTable, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text DynamoDBTable, should run on false
logging: reflekt: ClassUsesProcessor. Element: tableName, should run on false
logging: reflekt: ObjectUsesProcessor. Element: tableName, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text tableName, should run on false
logging: reflekt: ClassUsesProcessor. Element: PermissionLevel, should run on false
logging: reflekt: ObjectUsesProcessor. Element: PermissionLevel, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text PermissionLevel, should run on false
logging: reflekt: ClassUsesProcessor. Element: ReadWrite, should run on false
logging: reflekt: ObjectUsesProcessor. Element: ReadWrite, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text ReadWrite, should run on false
logging: reflekt: ClassUsesProcessor. Element: LoggerFactory, should run on false
logging: reflekt: ObjectUsesProcessor. Element: LoggerFactory, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text LoggerFactory, should run on false
logging: reflekt: ClassUsesProcessor. Element: getLogger(URLStorage::class.java), should run on false
logging: reflekt: ObjectUsesProcessor. Element: getLogger(URLStorage::class.java), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text getLogger(URLStorage::class.java), should run on false
logging: reflekt: ClassUsesProcessor. Element: getLogger, should run on false
logging: reflekt: ObjectUsesProcessor. Element: getLogger, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text getLogger, should run on false
logging: reflekt: ClassUsesProcessor. Element: URLStorage, should run on false
logging: reflekt: ObjectUsesProcessor. Element: URLStorage, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text URLStorage, should run on false
logging: reflekt: ClassUsesProcessor. Element: java, should run on false
logging: reflekt: ObjectUsesProcessor. Element: java, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text java, should run on false
logging: reflekt: ClassUsesProcessor. Element: AmazonDynamoDBClientBuilder, should run on false
logging: reflekt: ObjectUsesProcessor. Element: AmazonDynamoDBClientBuilder, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text AmazonDynamoDBClientBuilder, should run on false
logging: reflekt: ClassUsesProcessor. Element: standard(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: standard(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text standard(), should run on false
logging: reflekt: ClassUsesProcessor. Element: standard, should run on false
logging: reflekt: ObjectUsesProcessor. Element: standard, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text standard, should run on false
logging: reflekt: ClassUsesProcessor. Element: withKotlessLocal(AwsResource.DynamoDB), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withKotlessLocal(AwsResource.DynamoDB), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withKotlessLocal(AwsResource.DynamoDB), should run on false
logging: reflekt: ClassUsesProcessor. Element: withKotlessLocal, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withKotlessLocal, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withKotlessLocal, should run on false
logging: reflekt: ClassUsesProcessor. Element: AwsResource, should run on false
logging: reflekt: ObjectUsesProcessor. Element: AwsResource, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text AwsResource, should run on false
logging: reflekt: ClassUsesProcessor. Element: DynamoDB, should run on false
logging: reflekt: ObjectUsesProcessor. Element: DynamoDB, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text DynamoDB, should run on false
logging: reflekt: ClassUsesProcessor. Element: build(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: build(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text build(), should run on false
logging: reflekt: ClassUsesProcessor. Element: build, should run on false
logging: reflekt: ObjectUsesProcessor. Element: build, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text build, should run on false
logging: reflekt: ClassUsesProcessor. Element: fun getByCode(code: String): String? {
        val req = GetItemRequest().withKey(mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        )).withTableName(tableName)

        val res = client.getItem(req).item

        return res?.let { it["URL"]!!.s }
    }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: fun getByCode(code: String): String? {
        val req = GetItemRequest().withKey(mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        )).withTableName(tableName)

        val res = client.getItem(req).item

        return res?.let { it["URL"]!!.s }
    }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text fun getByCode(code: String): String? {
        val req = GetItemRequest().withKey(mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        )).withTableName(tableName)

        val res = client.getItem(req).item

        return res?.let { it["URL"]!!.s }
    }, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: GetItemRequest(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: GetItemRequest(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text GetItemRequest(), should run on false
logging: reflekt: ClassUsesProcessor. Element: GetItemRequest, should run on false
logging: reflekt: ObjectUsesProcessor. Element: GetItemRequest, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text GetItemRequest, should run on false
logging: reflekt: ClassUsesProcessor. Element: withKey(mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        )), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withKey(mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        )), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withKey(mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        )), should run on false
logging: reflekt: ClassUsesProcessor. Element: withKey, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withKey, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withKey, should run on false
logging: reflekt: ClassUsesProcessor. Element: mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        ), should run on false
logging: reflekt: ObjectUsesProcessor. Element: mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        ), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text mapOf(
            "URLHash" to AttributeValue().apply { s = code }
        ), should run on false
logging: reflekt: ClassUsesProcessor. Element: mapOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: mapOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text mapOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: to, should run on false
logging: reflekt: ObjectUsesProcessor. Element: to, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text to, should run on false
logging: reflekt: ClassUsesProcessor. Element: AttributeValue(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: AttributeValue(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text AttributeValue(), should run on false
logging: reflekt: ClassUsesProcessor. Element: AttributeValue, should run on false
logging: reflekt: ObjectUsesProcessor. Element: AttributeValue, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text AttributeValue, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply { s = code }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply { s = code }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text apply { s = code }, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text apply, should run on false
logging: reflekt: ClassUsesProcessor. Element: s, should run on false
logging: reflekt: ObjectUsesProcessor. Element: s, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text s, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: code, should run on false
logging: reflekt: ObjectUsesProcessor. Element: code, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text code, should run on false
logging: reflekt: ClassUsesProcessor. Element: withTableName(tableName), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withTableName(tableName), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withTableName(tableName), should run on false
logging: reflekt: ClassUsesProcessor. Element: withTableName, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withTableName, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withTableName, should run on false
logging: reflekt: ClassUsesProcessor. Element: tableName, should run on false
logging: reflekt: ObjectUsesProcessor. Element: tableName, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text tableName, should run on false
logging: reflekt: ClassUsesProcessor. Element: client, should run on false
logging: reflekt: ObjectUsesProcessor. Element: client, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text client, should run on false
logging: reflekt: ClassUsesProcessor. Element: getItem(req), should run on false
logging: reflekt: ObjectUsesProcessor. Element: getItem(req), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text getItem(req), should run on false
logging: reflekt: ClassUsesProcessor. Element: getItem, should run on false
logging: reflekt: ObjectUsesProcessor. Element: getItem, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text getItem, should run on false
logging: reflekt: ClassUsesProcessor. Element: req, should run on false
logging: reflekt: ObjectUsesProcessor. Element: req, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text req, should run on false
logging: reflekt: ClassUsesProcessor. Element: item, should run on false
logging: reflekt: ObjectUsesProcessor. Element: item, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text item, should run on false
logging: reflekt: ClassUsesProcessor. Element: res, should run on false
logging: reflekt: ObjectUsesProcessor. Element: res, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text res, should run on false
logging: reflekt: ClassUsesProcessor. Element: let { it["URL"]!!.s }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: let { it["URL"]!!.s }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text let { it["URL"]!!.s }, should run on false
logging: reflekt: ClassUsesProcessor. Element: let, should run on false
logging: reflekt: ObjectUsesProcessor. Element: let, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text let, should run on false
logging: reflekt: ClassUsesProcessor. Element: it["URL"], should run on false
logging: reflekt: ObjectUsesProcessor. Element: it["URL"], should run on false
logging: reflekt: FunctionUsesProcessor. Element: ARRAY_ACCESS_EXPRESSION with text it["URL"], should run on false
logging: reflekt: ClassUsesProcessor. Element: it, should run on false
logging: reflekt: ObjectUsesProcessor. Element: it, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text it, should run on false
logging: reflekt: ClassUsesProcessor. Element: !!, should run on false
logging: reflekt: ObjectUsesProcessor. Element: !!, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text !!, should run on false
logging: reflekt: ClassUsesProcessor. Element: s, should run on false
logging: reflekt: ObjectUsesProcessor. Element: s, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text s, should run on false
logging: reflekt: ClassUsesProcessor. Element: fun getByUrl(url: String): String? {
        val req = ScanRequest()
            .withTableName(tableName)
            .withFilterExpression("#u = :v_url")
            .withExpressionAttributeNames(mapOf("#u" to "URL"))
            .withExpressionAttributeValues(mapOf(":v_url" to AttributeValue().apply { s = url }))

        val items = client.scan(req)

        return items.items.firstOrNull()?.get("URLHash")?.s
    }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: fun getByUrl(url: String): String? {
        val req = ScanRequest()
            .withTableName(tableName)
            .withFilterExpression("#u = :v_url")
            .withExpressionAttributeNames(mapOf("#u" to "URL"))
            .withExpressionAttributeValues(mapOf(":v_url" to AttributeValue().apply { s = url }))

        val items = client.scan(req)

        return items.items.firstOrNull()?.get("URLHash")?.s
    }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text fun getByUrl(url: String): String? {
        val req = ScanRequest()
            .withTableName(tableName)
            .withFilterExpression("#u = :v_url")
            .withExpressionAttributeNames(mapOf("#u" to "URL"))
            .withExpressionAttributeValues(mapOf(":v_url" to AttributeValue().apply { s = url }))

        val items = client.scan(req)

        return items.items.firstOrNull()?.get("URLHash")?.s
    }, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: ScanRequest(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: ScanRequest(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text ScanRequest(), should run on false
logging: reflekt: ClassUsesProcessor. Element: ScanRequest, should run on false
logging: reflekt: ObjectUsesProcessor. Element: ScanRequest, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text ScanRequest, should run on false
logging: reflekt: ClassUsesProcessor. Element: withTableName(tableName), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withTableName(tableName), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withTableName(tableName), should run on false
logging: reflekt: ClassUsesProcessor. Element: withTableName, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withTableName, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withTableName, should run on false
logging: reflekt: ClassUsesProcessor. Element: tableName, should run on false
logging: reflekt: ObjectUsesProcessor. Element: tableName, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text tableName, should run on false
logging: reflekt: ClassUsesProcessor. Element: withFilterExpression("#u = :v_url"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withFilterExpression("#u = :v_url"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withFilterExpression("#u = :v_url"), should run on false
logging: reflekt: ClassUsesProcessor. Element: withFilterExpression, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withFilterExpression, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withFilterExpression, should run on false
logging: reflekt: ClassUsesProcessor. Element: withExpressionAttributeNames(mapOf("#u" to "URL")), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withExpressionAttributeNames(mapOf("#u" to "URL")), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withExpressionAttributeNames(mapOf("#u" to "URL")), should run on false
logging: reflekt: ClassUsesProcessor. Element: withExpressionAttributeNames, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withExpressionAttributeNames, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withExpressionAttributeNames, should run on false
logging: reflekt: ClassUsesProcessor. Element: mapOf("#u" to "URL"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: mapOf("#u" to "URL"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text mapOf("#u" to "URL"), should run on false
logging: reflekt: ClassUsesProcessor. Element: mapOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: mapOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text mapOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: to, should run on false
logging: reflekt: ObjectUsesProcessor. Element: to, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text to, should run on false
logging: reflekt: ClassUsesProcessor. Element: withExpressionAttributeValues(mapOf(":v_url" to AttributeValue().apply { s = url })), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withExpressionAttributeValues(mapOf(":v_url" to AttributeValue().apply { s = url })), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withExpressionAttributeValues(mapOf(":v_url" to AttributeValue().apply { s = url })), should run on false
logging: reflekt: ClassUsesProcessor. Element: withExpressionAttributeValues, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withExpressionAttributeValues, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withExpressionAttributeValues, should run on false
logging: reflekt: ClassUsesProcessor. Element: mapOf(":v_url" to AttributeValue().apply { s = url }), should run on false
logging: reflekt: ObjectUsesProcessor. Element: mapOf(":v_url" to AttributeValue().apply { s = url }), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text mapOf(":v_url" to AttributeValue().apply { s = url }), should run on false
logging: reflekt: ClassUsesProcessor. Element: mapOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: mapOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text mapOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: to, should run on false
logging: reflekt: ObjectUsesProcessor. Element: to, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text to, should run on false
logging: reflekt: ClassUsesProcessor. Element: AttributeValue(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: AttributeValue(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text AttributeValue(), should run on false
logging: reflekt: ClassUsesProcessor. Element: AttributeValue, should run on false
logging: reflekt: ObjectUsesProcessor. Element: AttributeValue, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text AttributeValue, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply { s = url }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply { s = url }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text apply { s = url }, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text apply, should run on false
logging: reflekt: ClassUsesProcessor. Element: s, should run on false
logging: reflekt: ObjectUsesProcessor. Element: s, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text s, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: url, should run on false
logging: reflekt: ObjectUsesProcessor. Element: url, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text url, should run on false
logging: reflekt: ClassUsesProcessor. Element: client, should run on false
logging: reflekt: ObjectUsesProcessor. Element: client, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text client, should run on false
logging: reflekt: ClassUsesProcessor. Element: scan(req), should run on false
logging: reflekt: ObjectUsesProcessor. Element: scan(req), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text scan(req), should run on false
logging: reflekt: ClassUsesProcessor. Element: scan, should run on false
logging: reflekt: ObjectUsesProcessor. Element: scan, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text scan, should run on false
logging: reflekt: ClassUsesProcessor. Element: req, should run on false
logging: reflekt: ObjectUsesProcessor. Element: req, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text req, should run on false
logging: reflekt: ClassUsesProcessor. Element: items, should run on false
logging: reflekt: ObjectUsesProcessor. Element: items, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text items, should run on false
logging: reflekt: ClassUsesProcessor. Element: items, should run on false
logging: reflekt: ObjectUsesProcessor. Element: items, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text items, should run on false
logging: reflekt: ClassUsesProcessor. Element: firstOrNull(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: firstOrNull(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text firstOrNull(), should run on false
logging: reflekt: ClassUsesProcessor. Element: firstOrNull, should run on false
logging: reflekt: ObjectUsesProcessor. Element: firstOrNull, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text firstOrNull, should run on false
logging: reflekt: ClassUsesProcessor. Element: get("URLHash"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: get("URLHash"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text get("URLHash"), should run on false
logging: reflekt: ClassUsesProcessor. Element: get, should run on false
logging: reflekt: ObjectUsesProcessor. Element: get, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text get, should run on false
logging: reflekt: ClassUsesProcessor. Element: s, should run on false
logging: reflekt: ObjectUsesProcessor. Element: s, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text s, should run on false
logging: reflekt: ClassUsesProcessor. Element: fun createCode(url: String): String {
        val code = RandomCode.next()

        val values = mapOf(
            "URLHash" to AttributeValue().apply { s = code },
            "URL" to AttributeValue().apply { s = url },
            "TimeStamp" to AttributeValue().apply { n = System.currentTimeMillis().toString() }
        )

        val req = PutItemRequest().withItem(values).withTableName(tableName)

        client.putItem(req)

        return code
    }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: fun createCode(url: String): String {
        val code = RandomCode.next()

        val values = mapOf(
            "URLHash" to AttributeValue().apply { s = code },
            "URL" to AttributeValue().apply { s = url },
            "TimeStamp" to AttributeValue().apply { n = System.currentTimeMillis().toString() }
        )

        val req = PutItemRequest().withItem(values).withTableName(tableName)

        client.putItem(req)

        return code
    }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text fun createCode(url: String): String {
        val code = RandomCode.next()

        val values = mapOf(
            "URLHash" to AttributeValue().apply { s = code },
            "URL" to AttributeValue().apply { s = url },
            "TimeStamp" to AttributeValue().apply { n = System.currentTimeMillis().toString() }
        )

        val req = PutItemRequest().withItem(values).withTableName(tableName)

        client.putItem(req)

        return code
    }, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: RandomCode, should run on false
logging: reflekt: ObjectUsesProcessor. Element: RandomCode, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text RandomCode, should run on false
logging: reflekt: ClassUsesProcessor. Element: next(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: next(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text next(), should run on false
logging: reflekt: ClassUsesProcessor. Element: next, should run on false
logging: reflekt: ObjectUsesProcessor. Element: next, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text next, should run on false
logging: reflekt: ClassUsesProcessor. Element: mapOf(
            "URLHash" to AttributeValue().apply { s = code },
            "URL" to AttributeValue().apply { s = url },
            "TimeStamp" to AttributeValue().apply { n = System.currentTimeMillis().toString() }
        ), should run on false
logging: reflekt: ObjectUsesProcessor. Element: mapOf(
            "URLHash" to AttributeValue().apply { s = code },
            "URL" to AttributeValue().apply { s = url },
            "TimeStamp" to AttributeValue().apply { n = System.currentTimeMillis().toString() }
        ), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text mapOf(
            "URLHash" to AttributeValue().apply { s = code },
            "URL" to AttributeValue().apply { s = url },
            "TimeStamp" to AttributeValue().apply { n = System.currentTimeMillis().toString() }
        ), should run on false
logging: reflekt: ClassUsesProcessor. Element: mapOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: mapOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text mapOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: to, should run on false
logging: reflekt: ObjectUsesProcessor. Element: to, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text to, should run on false
logging: reflekt: ClassUsesProcessor. Element: AttributeValue(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: AttributeValue(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text AttributeValue(), should run on false
logging: reflekt: ClassUsesProcessor. Element: AttributeValue, should run on false
logging: reflekt: ObjectUsesProcessor. Element: AttributeValue, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text AttributeValue, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply { s = code }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply { s = code }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text apply { s = code }, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text apply, should run on false
logging: reflekt: ClassUsesProcessor. Element: s, should run on false
logging: reflekt: ObjectUsesProcessor. Element: s, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text s, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: code, should run on false
logging: reflekt: ObjectUsesProcessor. Element: code, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text code, should run on false
logging: reflekt: ClassUsesProcessor. Element: to, should run on false
logging: reflekt: ObjectUsesProcessor. Element: to, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text to, should run on false
logging: reflekt: ClassUsesProcessor. Element: AttributeValue(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: AttributeValue(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text AttributeValue(), should run on false
logging: reflekt: ClassUsesProcessor. Element: AttributeValue, should run on false
logging: reflekt: ObjectUsesProcessor. Element: AttributeValue, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text AttributeValue, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply { s = url }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply { s = url }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text apply { s = url }, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text apply, should run on false
logging: reflekt: ClassUsesProcessor. Element: s, should run on false
logging: reflekt: ObjectUsesProcessor. Element: s, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text s, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: url, should run on false
logging: reflekt: ObjectUsesProcessor. Element: url, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text url, should run on false
logging: reflekt: ClassUsesProcessor. Element: to, should run on false
logging: reflekt: ObjectUsesProcessor. Element: to, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text to, should run on false
logging: reflekt: ClassUsesProcessor. Element: AttributeValue(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: AttributeValue(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text AttributeValue(), should run on false
logging: reflekt: ClassUsesProcessor. Element: AttributeValue, should run on false
logging: reflekt: ObjectUsesProcessor. Element: AttributeValue, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text AttributeValue, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply { n = System.currentTimeMillis().toString() }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply { n = System.currentTimeMillis().toString() }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text apply { n = System.currentTimeMillis().toString() }, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text apply, should run on false
logging: reflekt: ClassUsesProcessor. Element: n, should run on false
logging: reflekt: ObjectUsesProcessor. Element: n, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text n, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: System, should run on false
logging: reflekt: ObjectUsesProcessor. Element: System, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text System, should run on false
logging: reflekt: ClassUsesProcessor. Element: currentTimeMillis(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: currentTimeMillis(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text currentTimeMillis(), should run on false
logging: reflekt: ClassUsesProcessor. Element: currentTimeMillis, should run on false
logging: reflekt: ObjectUsesProcessor. Element: currentTimeMillis, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text currentTimeMillis, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: PutItemRequest(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: PutItemRequest(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text PutItemRequest(), should run on false
logging: reflekt: ClassUsesProcessor. Element: PutItemRequest, should run on false
logging: reflekt: ObjectUsesProcessor. Element: PutItemRequest, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text PutItemRequest, should run on false
logging: reflekt: ClassUsesProcessor. Element: withItem(values), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withItem(values), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withItem(values), should run on false
logging: reflekt: ClassUsesProcessor. Element: withItem, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withItem, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withItem, should run on false
logging: reflekt: ClassUsesProcessor. Element: values, should run on false
logging: reflekt: ObjectUsesProcessor. Element: values, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text values, should run on false
logging: reflekt: ClassUsesProcessor. Element: withTableName(tableName), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withTableName(tableName), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withTableName(tableName), should run on false
logging: reflekt: ClassUsesProcessor. Element: withTableName, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withTableName, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withTableName, should run on false
logging: reflekt: ClassUsesProcessor. Element: tableName, should run on false
logging: reflekt: ObjectUsesProcessor. Element: tableName, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text tableName, should run on false
logging: reflekt: ClassUsesProcessor. Element: client, should run on false
logging: reflekt: ObjectUsesProcessor. Element: client, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text client, should run on false
logging: reflekt: ClassUsesProcessor. Element: putItem(req), should run on false
logging: reflekt: ObjectUsesProcessor. Element: putItem(req), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text putItem(req), should run on false
logging: reflekt: ClassUsesProcessor. Element: putItem, should run on false
logging: reflekt: ObjectUsesProcessor. Element: putItem, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text putItem, should run on false
logging: reflekt: ClassUsesProcessor. Element: req, should run on false
logging: reflekt: ObjectUsesProcessor. Element: req, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text req, should run on false
logging: reflekt: ClassUsesProcessor. Element: code, should run on false
logging: reflekt: ObjectUsesProcessor. Element: code, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text code, should run on false
logging: reflekt: ClassUsesProcessor. Element: @Scheduled(Scheduled.everyHour)
    private fun storageCleanup() {
        logger.info("Starting URL storage cleanup")

        //Save URLs only for three hours
        val limitMillis = System.currentTimeMillis() - 3 * 60 * 60 * 1000
        val req = ScanRequest()
            .withTableName(tableName)
            .withFilterExpression("#t < :t_time")
            .withExpressionAttributeNames(mapOf("#t" to "TimeStamp"))
            .withExpressionAttributeValues(mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() }))

        val items = client.scan(req)

        logger.info("Cleaning ${items.count} too old items at storage")

        for (item in items.items) {
            val delete = DeleteItemRequest()
                .withTableName(tableName)
                .withKey(mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                ))

            client.deleteItem(delete)
        }

        logger.info("Ended URL storage cleanup")
    }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: @Scheduled(Scheduled.everyHour)
    private fun storageCleanup() {
        logger.info("Starting URL storage cleanup")

        //Save URLs only for three hours
        val limitMillis = System.currentTimeMillis() - 3 * 60 * 60 * 1000
        val req = ScanRequest()
            .withTableName(tableName)
            .withFilterExpression("#t < :t_time")
            .withExpressionAttributeNames(mapOf("#t" to "TimeStamp"))
            .withExpressionAttributeValues(mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() }))

        val items = client.scan(req)

        logger.info("Cleaning ${items.count} too old items at storage")

        for (item in items.items) {
            val delete = DeleteItemRequest()
                .withTableName(tableName)
                .withKey(mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                ))

            client.deleteItem(delete)
        }

        logger.info("Ended URL storage cleanup")
    }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @Scheduled(Scheduled.everyHour)
    private fun storageCleanup() {
        logger.info("Starting URL storage cleanup")

        //Save URLs only for three hours
        val limitMillis = System.currentTimeMillis() - 3 * 60 * 60 * 1000
        val req = ScanRequest()
            .withTableName(tableName)
            .withFilterExpression("#t < :t_time")
            .withExpressionAttributeNames(mapOf("#t" to "TimeStamp"))
            .withExpressionAttributeValues(mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() }))

        val items = client.scan(req)

        logger.info("Cleaning ${items.count} too old items at storage")

        for (item in items.items) {
            val delete = DeleteItemRequest()
                .withTableName(tableName)
                .withKey(mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                ))

            client.deleteItem(delete)
        }

        logger.info("Ended URL storage cleanup")
    }, should run on false
logging: reflekt: ClassUsesProcessor. Element: Scheduled, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Scheduled, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Scheduled, should run on false
logging: reflekt: ClassUsesProcessor. Element: Scheduled, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Scheduled, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Scheduled, should run on false
logging: reflekt: ClassUsesProcessor. Element: everyHour, should run on false
logging: reflekt: ObjectUsesProcessor. Element: everyHour, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text everyHour, should run on false
logging: reflekt: ClassUsesProcessor. Element: logger, should run on false
logging: reflekt: ObjectUsesProcessor. Element: logger, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text logger, should run on false
logging: reflekt: ClassUsesProcessor. Element: info("Starting URL storage cleanup"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: info("Starting URL storage cleanup"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text info("Starting URL storage cleanup"), should run on false
logging: reflekt: ClassUsesProcessor. Element: info, should run on false
logging: reflekt: ObjectUsesProcessor. Element: info, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text info, should run on false
logging: reflekt: ClassUsesProcessor. Element: System, should run on false
logging: reflekt: ObjectUsesProcessor. Element: System, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text System, should run on false
logging: reflekt: ClassUsesProcessor. Element: currentTimeMillis(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: currentTimeMillis(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text currentTimeMillis(), should run on false
logging: reflekt: ClassUsesProcessor. Element: currentTimeMillis, should run on false
logging: reflekt: ObjectUsesProcessor. Element: currentTimeMillis, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text currentTimeMillis, should run on false
logging: reflekt: ClassUsesProcessor. Element: -, should run on false
logging: reflekt: ObjectUsesProcessor. Element: -, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text -, should run on false
logging: reflekt: ClassUsesProcessor. Element: *, should run on false
logging: reflekt: ObjectUsesProcessor. Element: *, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text *, should run on false
logging: reflekt: ClassUsesProcessor. Element: *, should run on false
logging: reflekt: ObjectUsesProcessor. Element: *, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text *, should run on false
logging: reflekt: ClassUsesProcessor. Element: *, should run on false
logging: reflekt: ObjectUsesProcessor. Element: *, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text *, should run on false
logging: reflekt: ClassUsesProcessor. Element: ScanRequest(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: ScanRequest(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text ScanRequest(), should run on false
logging: reflekt: ClassUsesProcessor. Element: ScanRequest, should run on false
logging: reflekt: ObjectUsesProcessor. Element: ScanRequest, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text ScanRequest, should run on false
logging: reflekt: ClassUsesProcessor. Element: withTableName(tableName), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withTableName(tableName), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withTableName(tableName), should run on false
logging: reflekt: ClassUsesProcessor. Element: withTableName, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withTableName, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withTableName, should run on false
logging: reflekt: ClassUsesProcessor. Element: tableName, should run on false
logging: reflekt: ObjectUsesProcessor. Element: tableName, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text tableName, should run on false
logging: reflekt: ClassUsesProcessor. Element: withFilterExpression("#t < :t_time"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withFilterExpression("#t < :t_time"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withFilterExpression("#t < :t_time"), should run on false
logging: reflekt: ClassUsesProcessor. Element: withFilterExpression, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withFilterExpression, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withFilterExpression, should run on false
logging: reflekt: ClassUsesProcessor. Element: withExpressionAttributeNames(mapOf("#t" to "TimeStamp")), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withExpressionAttributeNames(mapOf("#t" to "TimeStamp")), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withExpressionAttributeNames(mapOf("#t" to "TimeStamp")), should run on false
logging: reflekt: ClassUsesProcessor. Element: withExpressionAttributeNames, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withExpressionAttributeNames, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withExpressionAttributeNames, should run on false
logging: reflekt: ClassUsesProcessor. Element: mapOf("#t" to "TimeStamp"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: mapOf("#t" to "TimeStamp"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text mapOf("#t" to "TimeStamp"), should run on false
logging: reflekt: ClassUsesProcessor. Element: mapOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: mapOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text mapOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: to, should run on false
logging: reflekt: ObjectUsesProcessor. Element: to, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text to, should run on false
logging: reflekt: ClassUsesProcessor. Element: withExpressionAttributeValues(mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() })), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withExpressionAttributeValues(mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() })), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withExpressionAttributeValues(mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() })), should run on false
logging: reflekt: ClassUsesProcessor. Element: withExpressionAttributeValues, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withExpressionAttributeValues, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withExpressionAttributeValues, should run on false
logging: reflekt: ClassUsesProcessor. Element: mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() }), should run on false
logging: reflekt: ObjectUsesProcessor. Element: mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() }), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text mapOf(":t_time" to AttributeValue().apply { n = limitMillis.toString() }), should run on false
logging: reflekt: ClassUsesProcessor. Element: mapOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: mapOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text mapOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: to, should run on false
logging: reflekt: ObjectUsesProcessor. Element: to, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text to, should run on false
logging: reflekt: ClassUsesProcessor. Element: AttributeValue(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: AttributeValue(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text AttributeValue(), should run on false
logging: reflekt: ClassUsesProcessor. Element: AttributeValue, should run on false
logging: reflekt: ObjectUsesProcessor. Element: AttributeValue, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text AttributeValue, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply { n = limitMillis.toString() }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply { n = limitMillis.toString() }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text apply { n = limitMillis.toString() }, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text apply, should run on false
logging: reflekt: ClassUsesProcessor. Element: n, should run on false
logging: reflekt: ObjectUsesProcessor. Element: n, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text n, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: limitMillis, should run on false
logging: reflekt: ObjectUsesProcessor. Element: limitMillis, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text limitMillis, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: client, should run on false
logging: reflekt: ObjectUsesProcessor. Element: client, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text client, should run on false
logging: reflekt: ClassUsesProcessor. Element: scan(req), should run on false
logging: reflekt: ObjectUsesProcessor. Element: scan(req), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text scan(req), should run on false
logging: reflekt: ClassUsesProcessor. Element: scan, should run on false
logging: reflekt: ObjectUsesProcessor. Element: scan, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text scan, should run on false
logging: reflekt: ClassUsesProcessor. Element: req, should run on false
logging: reflekt: ObjectUsesProcessor. Element: req, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text req, should run on false
logging: reflekt: ClassUsesProcessor. Element: logger, should run on false
logging: reflekt: ObjectUsesProcessor. Element: logger, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text logger, should run on false
logging: reflekt: ClassUsesProcessor. Element: info("Cleaning ${items.count} too old items at storage"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: info("Cleaning ${items.count} too old items at storage"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text info("Cleaning ${items.count} too old items at storage"), should run on false
logging: reflekt: ClassUsesProcessor. Element: info, should run on false
logging: reflekt: ObjectUsesProcessor. Element: info, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text info, should run on false
logging: reflekt: ClassUsesProcessor. Element: items, should run on false
logging: reflekt: ObjectUsesProcessor. Element: items, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text items, should run on false
logging: reflekt: ClassUsesProcessor. Element: count, should run on false
logging: reflekt: ObjectUsesProcessor. Element: count, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text count, should run on false
logging: reflekt: ClassUsesProcessor. Element: items, should run on false
logging: reflekt: ObjectUsesProcessor. Element: items, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text items, should run on false
logging: reflekt: ClassUsesProcessor. Element: items, should run on false
logging: reflekt: ObjectUsesProcessor. Element: items, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text items, should run on false
logging: reflekt: ClassUsesProcessor. Element: DeleteItemRequest(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: DeleteItemRequest(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text DeleteItemRequest(), should run on false
logging: reflekt: ClassUsesProcessor. Element: DeleteItemRequest, should run on false
logging: reflekt: ObjectUsesProcessor. Element: DeleteItemRequest, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text DeleteItemRequest, should run on false
logging: reflekt: ClassUsesProcessor. Element: withTableName(tableName), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withTableName(tableName), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withTableName(tableName), should run on false
logging: reflekt: ClassUsesProcessor. Element: withTableName, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withTableName, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withTableName, should run on false
logging: reflekt: ClassUsesProcessor. Element: tableName, should run on false
logging: reflekt: ObjectUsesProcessor. Element: tableName, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text tableName, should run on false
logging: reflekt: ClassUsesProcessor. Element: withKey(mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                )), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withKey(mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                )), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withKey(mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                )), should run on false
logging: reflekt: ClassUsesProcessor. Element: withKey, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withKey, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withKey, should run on false
logging: reflekt: ClassUsesProcessor. Element: mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                ), should run on false
logging: reflekt: ObjectUsesProcessor. Element: mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                ), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text mapOf(
                    "URLHash" to AttributeValue().apply { s = item["URLHash"]!!.s }
                ), should run on false
logging: reflekt: ClassUsesProcessor. Element: mapOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: mapOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text mapOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: to, should run on false
logging: reflekt: ObjectUsesProcessor. Element: to, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text to, should run on false
logging: reflekt: ClassUsesProcessor. Element: AttributeValue(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: AttributeValue(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text AttributeValue(), should run on false
logging: reflekt: ClassUsesProcessor. Element: AttributeValue, should run on false
logging: reflekt: ObjectUsesProcessor. Element: AttributeValue, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text AttributeValue, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply { s = item["URLHash"]!!.s }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply { s = item["URLHash"]!!.s }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text apply { s = item["URLHash"]!!.s }, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text apply, should run on false
logging: reflekt: ClassUsesProcessor. Element: s, should run on false
logging: reflekt: ObjectUsesProcessor. Element: s, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text s, should run on false
logging: reflekt: ClassUsesProcessor. Element: =, should run on false
logging: reflekt: ObjectUsesProcessor. Element: =, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text =, should run on false
logging: reflekt: ClassUsesProcessor. Element: item["URLHash"], should run on false
logging: reflekt: ObjectUsesProcessor. Element: item["URLHash"], should run on false
logging: reflekt: FunctionUsesProcessor. Element: ARRAY_ACCESS_EXPRESSION with text item["URLHash"], should run on false
logging: reflekt: ClassUsesProcessor. Element: item, should run on false
logging: reflekt: ObjectUsesProcessor. Element: item, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text item, should run on false
logging: reflekt: ClassUsesProcessor. Element: !!, should run on false
logging: reflekt: ObjectUsesProcessor. Element: !!, should run on false
logging: reflekt: FunctionUsesProcessor. Element: OPERATION_REFERENCE with text !!, should run on false
logging: reflekt: ClassUsesProcessor. Element: s, should run on false
logging: reflekt: ObjectUsesProcessor. Element: s, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text s, should run on false
logging: reflekt: ClassUsesProcessor. Element: client, should run on false
logging: reflekt: ObjectUsesProcessor. Element: client, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text client, should run on false
logging: reflekt: ClassUsesProcessor. Element: deleteItem(delete), should run on false
logging: reflekt: ObjectUsesProcessor. Element: deleteItem(delete), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text deleteItem(delete), should run on false
logging: reflekt: ClassUsesProcessor. Element: deleteItem, should run on false
logging: reflekt: ObjectUsesProcessor. Element: deleteItem, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text deleteItem, should run on false
logging: reflekt: ClassUsesProcessor. Element: delete, should run on false
logging: reflekt: ObjectUsesProcessor. Element: delete, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text delete, should run on false
logging: reflekt: ClassUsesProcessor. Element: logger, should run on false
logging: reflekt: ObjectUsesProcessor. Element: logger, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text logger, should run on false
logging: reflekt: ClassUsesProcessor. Element: info("Ended URL storage cleanup"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: info("Ended URL storage cleanup"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text info("Ended URL storage cleanup"), should run on false
logging: reflekt: ClassUsesProcessor. Element: info, should run on false
logging: reflekt: ObjectUsesProcessor. Element: info, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text info, should run on false
logging: reflekt: Finish analyzing file URLStorage.kt (package io.kotless.examples.storage)
logging: reflekt: Start analyzing file HTML.kt (package io.kotless.examples.utils)
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: examples, should run on false
logging: reflekt: ObjectUsesProcessor. Element: examples, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text examples, should run on false
logging: reflekt: ClassUsesProcessor. Element: utils, should run on false
logging: reflekt: ObjectUsesProcessor. Element: utils, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text utils, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotlinx, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotlinx, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotlinx, should run on false
logging: reflekt: ClassUsesProcessor. Element: html, should run on false
logging: reflekt: ObjectUsesProcessor. Element: html, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text html, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotlinx, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotlinx, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotlinx, should run on false
logging: reflekt: ClassUsesProcessor. Element: html, should run on false
logging: reflekt: ObjectUsesProcessor. Element: html, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text html, should run on false
logging: reflekt: ClassUsesProcessor. Element: stream, should run on false
logging: reflekt: ObjectUsesProcessor. Element: stream, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text stream, should run on false
logging: reflekt: ClassUsesProcessor. Element: createHTML, should run on false
logging: reflekt: ObjectUsesProcessor. Element: createHTML, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text createHTML, should run on false
logging: reflekt: ClassUsesProcessor. Element: fun html(body: TagConsumer<String>.() -> Unit): String {
    return createHTML().apply(body).finalize()
}, should run on false
logging: reflekt: ObjectUsesProcessor. Element: fun html(body: TagConsumer<String>.() -> Unit): String {
    return createHTML().apply(body).finalize()
}, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text fun html(body: TagConsumer<String>.() -> Unit): String {
    return createHTML().apply(body).finalize()
}, should run on true
logging: reflekt: ClassUsesProcessor. Element: TagConsumer, should run on false
logging: reflekt: ObjectUsesProcessor. Element: TagConsumer, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text TagConsumer, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: Unit, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Unit, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Unit, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: createHTML(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: createHTML(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text createHTML(), should run on false
logging: reflekt: ClassUsesProcessor. Element: createHTML, should run on false
logging: reflekt: ObjectUsesProcessor. Element: createHTML, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text createHTML, should run on false
logging: reflekt: ClassUsesProcessor. Element: apply(body), should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply(body), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text apply(body), should run on false
logging: reflekt: ClassUsesProcessor. Element: apply, should run on false
logging: reflekt: ObjectUsesProcessor. Element: apply, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text apply, should run on false
logging: reflekt: ClassUsesProcessor. Element: body, should run on false
logging: reflekt: ObjectUsesProcessor. Element: body, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text body, should run on false
logging: reflekt: ClassUsesProcessor. Element: finalize(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: finalize(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text finalize(), should run on false
logging: reflekt: ClassUsesProcessor. Element: finalize, should run on false
logging: reflekt: ObjectUsesProcessor. Element: finalize, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text finalize, should run on false
logging: reflekt: Finish analyzing file HTML.kt (package io.kotless.examples.utils)
logging: reflekt: Start analyzing file RandomCode.kt (package io.kotless.examples.utils)
logging: reflekt: ClassUsesProcessor. Element: io, should run on false
logging: reflekt: ObjectUsesProcessor. Element: io, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text io, should run on false
logging: reflekt: ClassUsesProcessor. Element: kotless, should run on false
logging: reflekt: ObjectUsesProcessor. Element: kotless, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text kotless, should run on false
logging: reflekt: ClassUsesProcessor. Element: examples, should run on false
logging: reflekt: ObjectUsesProcessor. Element: examples, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text examples, should run on false
logging: reflekt: ClassUsesProcessor. Element: utils, should run on false
logging: reflekt: ObjectUsesProcessor. Element: utils, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text utils, should run on false
logging: reflekt: ClassUsesProcessor. Element: java, should run on false
logging: reflekt: ObjectUsesProcessor. Element: java, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text java, should run on false
logging: reflekt: ClassUsesProcessor. Element: math, should run on false
logging: reflekt: ObjectUsesProcessor. Element: math, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text math, should run on false
logging: reflekt: ClassUsesProcessor. Element: BigInteger, should run on false
logging: reflekt: ObjectUsesProcessor. Element: BigInteger, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text BigInteger, should run on false
logging: reflekt: ClassUsesProcessor. Element: java, should run on false
logging: reflekt: ObjectUsesProcessor. Element: java, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text java, should run on false
logging: reflekt: ClassUsesProcessor. Element: security, should run on false
logging: reflekt: ObjectUsesProcessor. Element: security, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text security, should run on false
logging: reflekt: ClassUsesProcessor. Element: SecureRandom, should run on false
logging: reflekt: ObjectUsesProcessor. Element: SecureRandom, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text SecureRandom, should run on false
logging: reflekt: ClassUsesProcessor. Element: object RandomCode {
    private val rnd = SecureRandom()
    private const val defaultLength: Int = 6

    /** It is highly recommended to use default 36 radix **/
    fun next(len: Int = defaultLength, radix: Int = 36): String {
        return BigInteger(128, rnd).toString(radix).takeLast(len)
    }
}, should run on false
logging: reflekt: ObjectUsesProcessor. Element: object RandomCode {
    private val rnd = SecureRandom()
    private const val defaultLength: Int = 6

    /** It is highly recommended to use default 36 radix **/
    fun next(len: Int = defaultLength, radix: Int = 36): String {
        return BigInteger(128, rnd).toString(radix).takeLast(len)
    }
}, should run on true
logging: reflekt: FunctionUsesProcessor. Element: OBJECT_DECLARATION with text object RandomCode {
    private val rnd = SecureRandom()
    private const val defaultLength: Int = 6

    /** It is highly recommended to use default 36 radix **/
    fun next(len: Int = defaultLength, radix: Int = 36): String {
        return BigInteger(128, rnd).toString(radix).takeLast(len)
    }
}, should run on false
logging: reflekt: ClassUsesProcessor. Element: SecureRandom(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: SecureRandom(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text SecureRandom(), should run on false
logging: reflekt: ClassUsesProcessor. Element: SecureRandom, should run on false
logging: reflekt: ObjectUsesProcessor. Element: SecureRandom, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text SecureRandom, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: /** It is highly recommended to use default 36 radix **/
    fun next(len: Int = defaultLength, radix: Int = 36): String {
        return BigInteger(128, rnd).toString(radix).takeLast(len)
    }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: /** It is highly recommended to use default 36 radix **/
    fun next(len: Int = defaultLength, radix: Int = 36): String {
        return BigInteger(128, rnd).toString(radix).takeLast(len)
    }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text /** It is highly recommended to use default 36 radix **/
    fun next(len: Int = defaultLength, radix: Int = 36): String {
        return BigInteger(128, rnd).toString(radix).takeLast(len)
    }, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: defaultLength, should run on false
logging: reflekt: ObjectUsesProcessor. Element: defaultLength, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text defaultLength, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: BigInteger(128, rnd), should run on false
logging: reflekt: ObjectUsesProcessor. Element: BigInteger(128, rnd), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text BigInteger(128, rnd), should run on false
logging: reflekt: ClassUsesProcessor. Element: BigInteger, should run on false
logging: reflekt: ObjectUsesProcessor. Element: BigInteger, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text BigInteger, should run on false
logging: reflekt: ClassUsesProcessor. Element: rnd, should run on false
logging: reflekt: ObjectUsesProcessor. Element: rnd, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text rnd, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(radix), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(radix), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(radix), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: radix, should run on false
logging: reflekt: ObjectUsesProcessor. Element: radix, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text radix, should run on false
logging: reflekt: ClassUsesProcessor. Element: takeLast(len), should run on false
logging: reflekt: ObjectUsesProcessor. Element: takeLast(len), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text takeLast(len), should run on false
logging: reflekt: ClassUsesProcessor. Element: takeLast, should run on false
logging: reflekt: ObjectUsesProcessor. Element: takeLast, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text takeLast, should run on false
logging: reflekt: ClassUsesProcessor. Element: len, should run on false
logging: reflekt: ObjectUsesProcessor. Element: len, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text len, should run on false
logging: reflekt: Finish analyzing file RandomCode.kt (package io.kotless.examples.utils)
logging: reflekt: Getting uses from sources has done!
logging: reflekt: Start analysis <shortener> module's files
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={SupertypesToAnnotations(supertypes=[io.kotless.dsl.lang.LambdaInit], annotations=[])=[io.kotless.dsl.conversion.DefaultConversionService]}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: Getting uses from descriptors....
logging: reflekt: Getting uses from descriptors has done!
logging: reflekt: CURRENT LIBRARY USES: IrReflektUses(objects={}, classes={}, functions={})
logging: reflekt: IrReflektUses were created successfully
logging: reflekt: Getting instances....
logging: reflekt: Start analyzing file Root.kt (package io.kotless.examples.page)
logging: reflekt: Finish analyzing file Root.kt (package io.kotless.examples.page)
logging: reflekt: Start analyzing file Shortener.kt (package io.kotless.examples.page)
logging: reflekt: Finish analyzing file Shortener.kt (package io.kotless.examples.page)
logging: reflekt: Start analyzing file Statics.kt (package io.kotless.examples.page)
logging: reflekt: Finish analyzing file Statics.kt (package io.kotless.examples.page)
logging: reflekt: Start analyzing file URLStorage.kt (package io.kotless.examples.storage)
logging: reflekt: Finish analyzing file URLStorage.kt (package io.kotless.examples.storage)
logging: reflekt: Start analyzing file HTML.kt (package io.kotless.examples.utils)
logging: reflekt: Finish analyzing file HTML.kt (package io.kotless.examples.utils)
logging: reflekt: Start analyzing file RandomCode.kt (package io.kotless.examples.utils)
logging: reflekt: Finish analyzing file RandomCode.kt (package io.kotless.examples.utils)
logging: reflekt: Getting instances has done!
logging: reflekt: @Get("/r")
fun redirectUrl(k: String): HttpResponse {
    val url = URLStorage.getByCode(k)
    return if (url == null) {
        notFound("Unknown short URL")
    } else {
        redirect(url)
    }
}
logging: reflekt: @Get("/shorten")
fun shorten(value: String): String {
    logger.info("URL for shortening $value")

    val url = if (value.contains("://").not()) "https://$value" else value

    if (UrlValidator.getInstance().isValid(url).not()) {
        return "Non valid URL"
    }

    val code = URLStorage.getByUrl(url) ?: URLStorage.createCode(url)

    return "https://short.kotless.io${::redirectUrl.href(code)}"
}
logging: reflekt: @Get("/")
fun root() = html {
    head {
        title {
            +"Shortless"
        }

        link {
            href = ::faviconIco.href
            rel = "icon"
        }

        link {
            href = "https://use.fontawesome.com/releases/v5.8.1/css/all.css"
            rel = "stylesheet"
        }
        link {
            href = "https://fonts.googleapis.com/css?family=Fira+Sans:300,400,600&display=swap"
            rel = "stylesheet"
        }
        link {
            href = ::siteCss.href
            rel = "stylesheet"
        }
        script { src = ::siteJs.href }
    }
    body {
        div("main-block") {
            input {
                id = "shorten-input"
                classes = setOf("url-input")
                type = InputType.url
                placeholder = "Shorten your link"
            }
            button {
                id = "shorten-button"
                classes = setOf("url-button")
                type = ButtonType.submit

                span {
                    id = "shorten-button-text"
                    +"Go!"
                }
            }
        }
        div("footer-block") {
            span("footer-text") {
                +"Shortless"
            }
            span("footer-muted-text") {
                +"Powered by Kotless"
            }
        }
    }
}
logging: reflekt: fun html(body: TagConsumer<String>.() -> Unit): String {
    return createHTML().apply(body).finalize()
}
logging: reflekt: IrReflektInstances were created successfully
logging: reflekt: Finish analysis <shortener> module's files;
Uses: IrReflektUses(objects={SupertypesToAnnotations(supertypes=[io.kotless.dsl.lang.LambdaInit], annotations=[])=[io.kotless.dsl.conversion.DefaultConversionService]}, classes={}, functions={SignatureToAnnotations(signature=Function0<String>, annotations=[io.kotless.dsl.lang.http.Get])=[IrFunctionInfo(fqName=io.kotless.examples.page.root, receiverFqName=null, isObjectReceiver=false)]})
Instances: IrReflektInstances(objects=[IrTypeInstance(instance=OBJECT_DECLARATION, info=io.kotless.examples.utils.RandomCode), IrTypeInstance(instance=OBJECT_DECLARATION, info=io.kotless.examples.storage.URLStorage)], classes=[], functions=[IrTypeInstance(instance=FUN, info=IrFunctionInfo(fqName=io.kotless.examples.page.redirectUrl, receiverFqName=null, isObjectReceiver=false)), IrTypeInstance(instance=FUN, info=IrFunctionInfo(fqName=io.kotless.examples.page.shorten, receiverFqName=null, isObjectReceiver=false)), IrTypeInstance(instance=FUN, info=IrFunctionInfo(fqName=io.kotless.examples.page.root, receiverFqName=null, isObjectReceiver=false)), IrTypeInstance(instance=FUN, info=IrFunctionInfo(fqName=io.kotless.examples.utils.html, receiverFqName=null, isObjectReceiver=false))])
logging: reflekt: Start generation ReflektImpl. Base generation path: /Users/Anastasiia.Birillo/IdeaProjects/kotless/examples/build/shortener/src/main/kotlin-gen
logging: reflekt: ReflektImpl generation path: /Users/Anastasiia.Birillo/IdeaProjects/kotless/examples/build/shortener/src/main/kotlin-gen/io/reflekt/ReflektImpl.kt
logging: reflekt: Finish generation ReflektImpl
logging: reflekt: Finish analysis with ReflektModuleAnalysisExtension
logging: reflekt: REFLEKT ALL TIME ANALYSIS INSIDE: 185 ms
logging: reflekt: REFLEKT ALL TIME REFLEKT INSIDE: 11 ms
logging: reflekt: REFLEKT ALL TIME SMART REFLEKT INSIDE: 2543 ms
