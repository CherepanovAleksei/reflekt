logging: reflekt: REFLEKT CONFIGURATION:
ENABLED: false
REFLEKT META FILES FROM LIBRARIES: []
OUTPUT DIRECTORY: src/main/kotlin-gen
TO SAVE METADATA: false
REFLEKT METADATA RELATIVE PATH: null
DEPENDENCY JARS: []
_____________________________________________

logging: reflekt: PROJECT FILE PATH: null
logging: reflekt: ReflektAnalysisExtension is starting...
logging: reflekt: reflektMetaFiles []
logging: reflekt: Library invokes: ReflektInvokes(objects={}, classes={}, functions={})
logging: reflekt: Library packages: []
logging: reflekt: Getting invokes from sources....
logging: reflekt: Start analyzing file Annotations.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Finish analyzing file Annotations.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Start analyzing file Classes.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Expression CInterface is valid: false
logging: reflekt: Expression CInterface is valid: false
logging: reflekt: Expression CInterface is valid: false
logging: reflekt: Expression C1 is valid: false
logging: reflekt: Expression C1 is valid: false
logging: reflekt: Expression C1 is valid: false
logging: reflekt: Expression C2 is valid: false
logging: reflekt: Expression C2 is valid: false
logging: reflekt: Expression C2 is valid: false
logging: reflekt: Expression CInterface is valid: false
logging: reflekt: Expression CInterface is valid: false
logging: reflekt: Expression CInterface is valid: false
logging: reflekt: Finish analyzing file Classes.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Start analyzing file Functions.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression listOf(3) is valid: false
logging: reflekt: Expression listOf(3) is valid: false
logging: reflekt: Expression listOf(3) is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression listOf(a.toString(), b.toString(), c.toString()) is valid: false
logging: reflekt: Expression listOf(a.toString(), b.toString(), c.toString()) is valid: false
logging: reflekt: Expression listOf(a.toString(), b.toString(), c.toString()) is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression a is valid: false
logging: reflekt: Expression a is valid: false
logging: reflekt: Expression a is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression b is valid: false
logging: reflekt: Expression b is valid: false
logging: reflekt: Expression b is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression c is valid: false
logging: reflekt: Expression c is valid: false
logging: reflekt: Expression c is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression println("public second example foo") is valid: false
logging: reflekt: Expression println("public second example foo") is valid: false
logging: reflekt: Expression println("public second example foo") is valid: false
logging: reflekt: Expression println is valid: false
logging: reflekt: Expression println is valid: false
logging: reflekt: Expression println is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression listOf(3) is valid: false
logging: reflekt: Expression listOf(3) is valid: false
logging: reflekt: Expression listOf(3) is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression listOf(a.toString(), b.toString(), c.toString()) is valid: false
logging: reflekt: Expression listOf(a.toString(), b.toString(), c.toString()) is valid: false
logging: reflekt: Expression listOf(a.toString(), b.toString(), c.toString()) is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression a is valid: false
logging: reflekt: Expression a is valid: false
logging: reflekt: Expression a is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression b is valid: false
logging: reflekt: Expression b is valid: false
logging: reflekt: Expression b is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression c is valid: false
logging: reflekt: Expression c is valid: false
logging: reflekt: Expression c is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression listOf(3) is valid: false
logging: reflekt: Expression listOf(3) is valid: false
logging: reflekt: Expression listOf(3) is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression listOf(a.toString(), b.toString(), c.toString()) is valid: false
logging: reflekt: Expression listOf(a.toString(), b.toString(), c.toString()) is valid: false
logging: reflekt: Expression listOf(a.toString(), b.toString(), c.toString()) is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression a is valid: false
logging: reflekt: Expression a is valid: false
logging: reflekt: Expression a is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression b is valid: false
logging: reflekt: Expression b is valid: false
logging: reflekt: Expression b is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression c is valid: false
logging: reflekt: Expression c is valid: false
logging: reflekt: Expression c is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression listOf(3) is valid: false
logging: reflekt: Expression listOf(3) is valid: false
logging: reflekt: Expression listOf(3) is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression listOf(a.toString(), b.toString(), c.toString()) is valid: false
logging: reflekt: Expression listOf(a.toString(), b.toString(), c.toString()) is valid: false
logging: reflekt: Expression listOf(a.toString(), b.toString(), c.toString()) is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression listOf is valid: false
logging: reflekt: Expression a is valid: false
logging: reflekt: Expression a is valid: false
logging: reflekt: Expression a is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression b is valid: false
logging: reflekt: Expression b is valid: false
logging: reflekt: Expression b is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression c is valid: false
logging: reflekt: Expression c is valid: false
logging: reflekt: Expression c is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Finish analyzing file Functions.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Start analyzing file Objects.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Expression OInterface is valid: false
logging: reflekt: Expression OInterface is valid: false
logging: reflekt: Expression OInterface is valid: false
logging: reflekt: Expression OInterface is valid: false
logging: reflekt: Expression OInterface is valid: false
logging: reflekt: Expression OInterface is valid: false
logging: reflekt: Finish analyzing file Objects.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Start analyzing file Main.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression test is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Expression ir is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression org is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression jetbrains is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression reflekt is valid: false
logging: reflekt: Expression Reflekt is valid: false
logging: reflekt: Expression Reflekt is valid: false
logging: reflekt: Expression Reflekt is valid: false
logging: reflekt: Expression Reflekt is valid: false
logging: reflekt: Expression Reflekt is valid: false
logging: reflekt: Expression Reflekt is valid: false
logging: reflekt: Expression functions() is valid: false
logging: reflekt: Expression functions() is valid: false
logging: reflekt: Expression functions() is valid: false
logging: reflekt: Expression functions is valid: false
logging: reflekt: Expression functions is valid: false
logging: reflekt: Expression functions is valid: true
logging: reflekt: Expression withAnnotations<(a: Int, b: Float?, c: Set<Boolean>) -> List<String>>(IrTestAnnotation::class) is valid: false
logging: reflekt: Expression withAnnotations<(a: Int, b: Float?, c: Set<Boolean>) -> List<String>>(IrTestAnnotation::class) is valid: false
logging: reflekt: Expression withAnnotations<(a: Int, b: Float?, c: Set<Boolean>) -> List<String>>(IrTestAnnotation::class) is valid: false
logging: reflekt: Expression withAnnotations is valid: false
logging: reflekt: Expression withAnnotations is valid: false
logging: reflekt: Expression withAnnotations is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Int is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Float is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Set is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression Boolean is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression List is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression String is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression IrTestAnnotation is valid: false
logging: reflekt: Expression toList() is valid: false
logging: reflekt: Expression toList() is valid: false
logging: reflekt: Expression toList() is valid: false
logging: reflekt: Expression toList is valid: false
logging: reflekt: Expression toList is valid: false
logging: reflekt: Expression toList is valid: false
logging: reflekt: Expression also { f -> f.forEach { it(1, null, emptySet()) } } is valid: false
logging: reflekt: Expression also { f -> f.forEach { it(1, null, emptySet()) } } is valid: false
logging: reflekt: Expression also { f -> f.forEach { it(1, null, emptySet()) } } is valid: false
logging: reflekt: Expression also is valid: false
logging: reflekt: Expression also is valid: false
logging: reflekt: Expression also is valid: false
logging: reflekt: Expression f is valid: false
logging: reflekt: Expression f is valid: false
logging: reflekt: Expression f is valid: false
logging: reflekt: Expression forEach { it(1, null, emptySet()) } is valid: false
logging: reflekt: Expression forEach { it(1, null, emptySet()) } is valid: false
logging: reflekt: Expression forEach { it(1, null, emptySet()) } is valid: false
logging: reflekt: Expression forEach is valid: false
logging: reflekt: Expression forEach is valid: false
logging: reflekt: Expression forEach is valid: false
logging: reflekt: Expression it(1, null, emptySet()) is valid: false
logging: reflekt: Expression it(1, null, emptySet()) is valid: false
logging: reflekt: Expression it(1, null, emptySet()) is valid: false
logging: reflekt: Expression it is valid: false
logging: reflekt: Expression it is valid: false
logging: reflekt: Expression it is valid: false
logging: reflekt: Expression emptySet() is valid: false
logging: reflekt: Expression emptySet() is valid: false
logging: reflekt: Expression emptySet() is valid: false
logging: reflekt: Expression emptySet is valid: false
logging: reflekt: Expression emptySet is valid: false
logging: reflekt: Expression emptySet is valid: false
logging: reflekt: Expression map { it.toString() } is valid: false
logging: reflekt: Expression map { it.toString() } is valid: false
logging: reflekt: Expression map { it.toString() } is valid: false
logging: reflekt: Expression map is valid: false
logging: reflekt: Expression map is valid: false
logging: reflekt: Expression map is valid: false
logging: reflekt: Expression it is valid: false
logging: reflekt: Expression it is valid: false
logging: reflekt: Expression it is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString() is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toString is valid: false
logging: reflekt: Expression toSet() is valid: false
logging: reflekt: Expression toSet() is valid: false
logging: reflekt: Expression toSet() is valid: false
logging: reflekt: Expression toSet is valid: false
logging: reflekt: Expression toSet is valid: false
logging: reflekt: Expression toSet is valid: false
logging: reflekt: Finish analyzing file Main.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Getting invokes from sources has done!
logging: reflekt: Project's invokes: ReflektInvokes(objects={}, classes={}, functions={org.jetbrains.reflekt.test.ir.Main.kt=[SignatureToAnnotations(signature=Function3<[@kotlin.ParameterName] Int, [@kotlin.ParameterName] Float?, [@kotlin.ParameterName] Set<Boolean>, List<String>>, annotations=[org.jetbrains.reflekt.test.ir.IrTestAnnotation])]})
logging: reflekt: Merged invokes: ReflektInvokes(objects={}, classes={}, functions={org.jetbrains.reflekt.test.ir.Main.kt=[SignatureToAnnotations(signature=Function3<[@kotlin.ParameterName] Int, [@kotlin.ParameterName] Float?, [@kotlin.ParameterName] Set<Boolean>, List<String>>, annotations=[org.jetbrains.reflekt.test.ir.IrTestAnnotation])]})
logging: reflekt: Getting uses from sources....
logging: reflekt: Start analyzing file Annotations.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: ClassUsesProcessor. Element: org, should run on false
logging: reflekt: ObjectUsesProcessor. Element: org, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text org, should run on false
logging: reflekt: ClassUsesProcessor. Element: jetbrains, should run on false
logging: reflekt: ObjectUsesProcessor. Element: jetbrains, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text jetbrains, should run on false
logging: reflekt: ClassUsesProcessor. Element: reflekt, should run on false
logging: reflekt: ObjectUsesProcessor. Element: reflekt, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text reflekt, should run on false
logging: reflekt: ClassUsesProcessor. Element: test, should run on false
logging: reflekt: ObjectUsesProcessor. Element: test, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text test, should run on false
logging: reflekt: ClassUsesProcessor. Element: ir, should run on false
logging: reflekt: ObjectUsesProcessor. Element: ir, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text ir, should run on false
logging: reflekt: ClassUsesProcessor. Element: annotation class IrTestAnnotation, should run on true
logging: reflekt: ObjectUsesProcessor. Element: annotation class IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CLASS with text annotation class IrTestAnnotation, should run on false
logging: reflekt: Finish analyzing file Annotations.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Start analyzing file Classes.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: ClassUsesProcessor. Element: org, should run on false
logging: reflekt: ObjectUsesProcessor. Element: org, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text org, should run on false
logging: reflekt: ClassUsesProcessor. Element: jetbrains, should run on false
logging: reflekt: ObjectUsesProcessor. Element: jetbrains, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text jetbrains, should run on false
logging: reflekt: ClassUsesProcessor. Element: reflekt, should run on false
logging: reflekt: ObjectUsesProcessor. Element: reflekt, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text reflekt, should run on false
logging: reflekt: ClassUsesProcessor. Element: test, should run on false
logging: reflekt: ObjectUsesProcessor. Element: test, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text test, should run on false
logging: reflekt: ClassUsesProcessor. Element: ir, should run on false
logging: reflekt: ObjectUsesProcessor. Element: ir, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text ir, should run on false
logging: reflekt: ClassUsesProcessor. Element: interface CInterface, should run on false
logging: reflekt: ObjectUsesProcessor. Element: interface CInterface, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CLASS with text interface CInterface, should run on false
logging: reflekt: ClassUsesProcessor. Element: open class C1 : CInterface, should run on true
logging: reflekt: ObjectUsesProcessor. Element: open class C1 : CInterface, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CLASS with text open class C1 : CInterface, should run on false
logging: reflekt: ClassUsesProcessor. Element: CInterface, should run on false
logging: reflekt: ObjectUsesProcessor. Element: CInterface, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text CInterface, should run on false
logging: reflekt: ClassUsesProcessor. Element: open class C2 : C1(), should run on true
logging: reflekt: ObjectUsesProcessor. Element: open class C2 : C1(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CLASS with text open class C2 : C1(), should run on false
logging: reflekt: ClassUsesProcessor. Element: C1, should run on false
logging: reflekt: ObjectUsesProcessor. Element: C1, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text C1, should run on false
logging: reflekt: ClassUsesProcessor. Element: open class C3 : C2() {
    class C5 : CInterface
}, should run on true
logging: reflekt: ObjectUsesProcessor. Element: open class C3 : C2() {
    class C5 : CInterface
}, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CLASS with text open class C3 : C2() {
    class C5 : CInterface
}, should run on false
logging: reflekt: ClassUsesProcessor. Element: C2, should run on false
logging: reflekt: ObjectUsesProcessor. Element: C2, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text C2, should run on false
logging: reflekt: ClassUsesProcessor. Element: class C5 : CInterface, should run on true
logging: reflekt: ObjectUsesProcessor. Element: class C5 : CInterface, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CLASS with text class C5 : CInterface, should run on false
logging: reflekt: ClassUsesProcessor. Element: CInterface, should run on false
logging: reflekt: ObjectUsesProcessor. Element: CInterface, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text CInterface, should run on false
logging: reflekt: Finish analyzing file Classes.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Start analyzing file Functions.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: ClassUsesProcessor. Element: org, should run on false
logging: reflekt: ObjectUsesProcessor. Element: org, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text org, should run on false
logging: reflekt: ClassUsesProcessor. Element: jetbrains, should run on false
logging: reflekt: ObjectUsesProcessor. Element: jetbrains, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text jetbrains, should run on false
logging: reflekt: ClassUsesProcessor. Element: reflekt, should run on false
logging: reflekt: ObjectUsesProcessor. Element: reflekt, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text reflekt, should run on false
logging: reflekt: ClassUsesProcessor. Element: test, should run on false
logging: reflekt: ObjectUsesProcessor. Element: test, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text test, should run on false
logging: reflekt: ClassUsesProcessor. Element: ir, should run on false
logging: reflekt: ObjectUsesProcessor. Element: ir, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text ir, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
fun fun1() {}, should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
fun fun1() {}, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
fun fun1() {}, should run on true
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
fun fun2(): Int = 3, should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
fun fun2(): Int = 3, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
fun fun2(): Int = 3, should run on true
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
fun fun3(): List<Int> = listOf(3), should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
fun fun3(): List<Int> = listOf(3), should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
fun fun3(): List<Int> = listOf(3), should run on true
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: List, should run on false
logging: reflekt: ObjectUsesProcessor. Element: List, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text List, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf(3), should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf(3), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text listOf(3), should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text listOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString()), should run on true
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: Float, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Float, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Float, should run on false
logging: reflekt: ClassUsesProcessor. Element: Set, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Set, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Set, should run on false
logging: reflekt: ClassUsesProcessor. Element: Boolean, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Boolean, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Boolean, should run on false
logging: reflekt: ClassUsesProcessor. Element: List, should run on false
logging: reflekt: ObjectUsesProcessor. Element: List, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text List, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text listOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: a, should run on false
logging: reflekt: ObjectUsesProcessor. Element: a, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text a, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: b, should run on false
logging: reflekt: ObjectUsesProcessor. Element: b, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text b, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: c, should run on false
logging: reflekt: ObjectUsesProcessor. Element: c, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text c, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: fun fooBoolean(): Boolean {
    println("public second example foo")
    return true
}, should run on false
logging: reflekt: ObjectUsesProcessor. Element: fun fooBoolean(): Boolean {
    println("public second example foo")
    return true
}, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text fun fooBoolean(): Boolean {
    println("public second example foo")
    return true
}, should run on true
logging: reflekt: ClassUsesProcessor. Element: Boolean, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Boolean, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Boolean, should run on false
logging: reflekt: ClassUsesProcessor. Element: println("public second example foo"), should run on false
logging: reflekt: ObjectUsesProcessor. Element: println("public second example foo"), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text println("public second example foo"), should run on false
logging: reflekt: ClassUsesProcessor. Element: println, should run on false
logging: reflekt: ObjectUsesProcessor. Element: println, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text println, should run on false
logging: reflekt: ClassUsesProcessor. Element: class FunctionTestClass {
    @IrTestAnnotation
    fun fun1() {}

    @IrTestAnnotation
    fun fun2(): Int = 3

    @IrTestAnnotation
    fun fun3(): List<Int> = listOf(3)

    @IrTestAnnotation
    fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString())

    companion object {
        @IrTestAnnotation
        fun fun1() {}

        @IrTestAnnotation
        fun fun2(): Int = 3

        @IrTestAnnotation
        fun fun3(): List<Int> = listOf(3)

        @IrTestAnnotation
        fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString())
    }
}, should run on true
logging: reflekt: ObjectUsesProcessor. Element: class FunctionTestClass {
    @IrTestAnnotation
    fun fun1() {}

    @IrTestAnnotation
    fun fun2(): Int = 3

    @IrTestAnnotation
    fun fun3(): List<Int> = listOf(3)

    @IrTestAnnotation
    fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString())

    companion object {
        @IrTestAnnotation
        fun fun1() {}

        @IrTestAnnotation
        fun fun2(): Int = 3

        @IrTestAnnotation
        fun fun3(): List<Int> = listOf(3)

        @IrTestAnnotation
        fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString())
    }
}, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CLASS with text class FunctionTestClass {
    @IrTestAnnotation
    fun fun1() {}

    @IrTestAnnotation
    fun fun2(): Int = 3

    @IrTestAnnotation
    fun fun3(): List<Int> = listOf(3)

    @IrTestAnnotation
    fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString())

    companion object {
        @IrTestAnnotation
        fun fun1() {}

        @IrTestAnnotation
        fun fun2(): Int = 3

        @IrTestAnnotation
        fun fun3(): List<Int> = listOf(3)

        @IrTestAnnotation
        fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString())
    }
}, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
    fun fun1() {}, should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
    fun fun1() {}, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
    fun fun1() {}, should run on false
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
    fun fun2(): Int = 3, should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
    fun fun2(): Int = 3, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
    fun fun2(): Int = 3, should run on false
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
    fun fun3(): List<Int> = listOf(3), should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
    fun fun3(): List<Int> = listOf(3), should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
    fun fun3(): List<Int> = listOf(3), should run on false
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: List, should run on false
logging: reflekt: ObjectUsesProcessor. Element: List, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text List, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf(3), should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf(3), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text listOf(3), should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text listOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
    fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
    fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
    fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: Float, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Float, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Float, should run on false
logging: reflekt: ClassUsesProcessor. Element: Set, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Set, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Set, should run on false
logging: reflekt: ClassUsesProcessor. Element: Boolean, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Boolean, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Boolean, should run on false
logging: reflekt: ClassUsesProcessor. Element: List, should run on false
logging: reflekt: ObjectUsesProcessor. Element: List, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text List, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text listOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: a, should run on false
logging: reflekt: ObjectUsesProcessor. Element: a, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text a, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: b, should run on false
logging: reflekt: ObjectUsesProcessor. Element: b, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text b, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: c, should run on false
logging: reflekt: ObjectUsesProcessor. Element: c, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text c, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: companion object {
        @IrTestAnnotation
        fun fun1() {}

        @IrTestAnnotation
        fun fun2(): Int = 3

        @IrTestAnnotation
        fun fun3(): List<Int> = listOf(3)

        @IrTestAnnotation
        fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString())
    }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: companion object {
        @IrTestAnnotation
        fun fun1() {}

        @IrTestAnnotation
        fun fun2(): Int = 3

        @IrTestAnnotation
        fun fun3(): List<Int> = listOf(3)

        @IrTestAnnotation
        fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString())
    }, should run on true
logging: reflekt: FunctionUsesProcessor. Element: OBJECT_DECLARATION with text companion object {
        @IrTestAnnotation
        fun fun1() {}

        @IrTestAnnotation
        fun fun2(): Int = 3

        @IrTestAnnotation
        fun fun3(): List<Int> = listOf(3)

        @IrTestAnnotation
        fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString())
    }, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
        fun fun1() {}, should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
        fun fun1() {}, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
        fun fun1() {}, should run on false
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
        fun fun2(): Int = 3, should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
        fun fun2(): Int = 3, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
        fun fun2(): Int = 3, should run on false
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
        fun fun3(): List<Int> = listOf(3), should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
        fun fun3(): List<Int> = listOf(3), should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
        fun fun3(): List<Int> = listOf(3), should run on false
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: List, should run on false
logging: reflekt: ObjectUsesProcessor. Element: List, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text List, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf(3), should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf(3), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text listOf(3), should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text listOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
        fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
        fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
        fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: Float, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Float, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Float, should run on false
logging: reflekt: ClassUsesProcessor. Element: Set, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Set, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Set, should run on false
logging: reflekt: ClassUsesProcessor. Element: Boolean, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Boolean, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Boolean, should run on false
logging: reflekt: ClassUsesProcessor. Element: List, should run on false
logging: reflekt: ObjectUsesProcessor. Element: List, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text List, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text listOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: a, should run on false
logging: reflekt: ObjectUsesProcessor. Element: a, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text a, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: b, should run on false
logging: reflekt: ObjectUsesProcessor. Element: b, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text b, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: c, should run on false
logging: reflekt: ObjectUsesProcessor. Element: c, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text c, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: object FunctionTestObject {
    @IrTestAnnotation
    fun fun1() {}

    @IrTestAnnotation
    fun fun2(): Int = 3

    @IrTestAnnotation
    fun fun3(): List<Int> = listOf(3)

    @IrTestAnnotation
    fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString())
}, should run on false
logging: reflekt: ObjectUsesProcessor. Element: object FunctionTestObject {
    @IrTestAnnotation
    fun fun1() {}

    @IrTestAnnotation
    fun fun2(): Int = 3

    @IrTestAnnotation
    fun fun3(): List<Int> = listOf(3)

    @IrTestAnnotation
    fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString())
}, should run on true
logging: reflekt: FunctionUsesProcessor. Element: OBJECT_DECLARATION with text object FunctionTestObject {
    @IrTestAnnotation
    fun fun1() {}

    @IrTestAnnotation
    fun fun2(): Int = 3

    @IrTestAnnotation
    fun fun3(): List<Int> = listOf(3)

    @IrTestAnnotation
    fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString())
}, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
    fun fun1() {}, should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
    fun fun1() {}, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
    fun fun1() {}, should run on false
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
    fun fun2(): Int = 3, should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
    fun fun2(): Int = 3, should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
    fun fun2(): Int = 3, should run on false
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
    fun fun3(): List<Int> = listOf(3), should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
    fun fun3(): List<Int> = listOf(3), should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
    fun fun3(): List<Int> = listOf(3), should run on false
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: List, should run on false
logging: reflekt: ObjectUsesProcessor. Element: List, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text List, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf(3), should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf(3), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text listOf(3), should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text listOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: @IrTestAnnotation
    fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ObjectUsesProcessor. Element: @IrTestAnnotation
    fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text @IrTestAnnotation
    fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: Float, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Float, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Float, should run on false
logging: reflekt: ClassUsesProcessor. Element: Set, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Set, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Set, should run on false
logging: reflekt: ClassUsesProcessor. Element: Boolean, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Boolean, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Boolean, should run on false
logging: reflekt: ClassUsesProcessor. Element: List, should run on false
logging: reflekt: ObjectUsesProcessor. Element: List, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text List, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text listOf(a.toString(), b.toString(), c.toString()), should run on false
logging: reflekt: ClassUsesProcessor. Element: listOf, should run on false
logging: reflekt: ObjectUsesProcessor. Element: listOf, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text listOf, should run on false
logging: reflekt: ClassUsesProcessor. Element: a, should run on false
logging: reflekt: ObjectUsesProcessor. Element: a, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text a, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: b, should run on false
logging: reflekt: ObjectUsesProcessor. Element: b, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text b, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: c, should run on false
logging: reflekt: ObjectUsesProcessor. Element: c, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text c, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: Finish analyzing file Functions.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Start analyzing file Objects.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: ClassUsesProcessor. Element: org, should run on false
logging: reflekt: ObjectUsesProcessor. Element: org, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text org, should run on false
logging: reflekt: ClassUsesProcessor. Element: jetbrains, should run on false
logging: reflekt: ObjectUsesProcessor. Element: jetbrains, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text jetbrains, should run on false
logging: reflekt: ClassUsesProcessor. Element: reflekt, should run on false
logging: reflekt: ObjectUsesProcessor. Element: reflekt, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text reflekt, should run on false
logging: reflekt: ClassUsesProcessor. Element: test, should run on false
logging: reflekt: ObjectUsesProcessor. Element: test, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text test, should run on false
logging: reflekt: ClassUsesProcessor. Element: ir, should run on false
logging: reflekt: ObjectUsesProcessor. Element: ir, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text ir, should run on false
logging: reflekt: ClassUsesProcessor. Element: interface OInterface, should run on false
logging: reflekt: ObjectUsesProcessor. Element: interface OInterface, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CLASS with text interface OInterface, should run on false
logging: reflekt: ClassUsesProcessor. Element: object O1 : OInterface {
    object O2 : OInterface
}, should run on false
logging: reflekt: ObjectUsesProcessor. Element: object O1 : OInterface {
    object O2 : OInterface
}, should run on true
logging: reflekt: FunctionUsesProcessor. Element: OBJECT_DECLARATION with text object O1 : OInterface {
    object O2 : OInterface
}, should run on false
logging: reflekt: ClassUsesProcessor. Element: OInterface, should run on false
logging: reflekt: ObjectUsesProcessor. Element: OInterface, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text OInterface, should run on false
logging: reflekt: ClassUsesProcessor. Element: object O2 : OInterface, should run on false
logging: reflekt: ObjectUsesProcessor. Element: object O2 : OInterface, should run on true
logging: reflekt: FunctionUsesProcessor. Element: OBJECT_DECLARATION with text object O2 : OInterface, should run on false
logging: reflekt: ClassUsesProcessor. Element: OInterface, should run on false
logging: reflekt: ObjectUsesProcessor. Element: OInterface, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text OInterface, should run on false
logging: reflekt: Finish analyzing file Objects.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Start analyzing file Main.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: ClassUsesProcessor. Element: org, should run on false
logging: reflekt: ObjectUsesProcessor. Element: org, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text org, should run on false
logging: reflekt: ClassUsesProcessor. Element: jetbrains, should run on false
logging: reflekt: ObjectUsesProcessor. Element: jetbrains, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text jetbrains, should run on false
logging: reflekt: ClassUsesProcessor. Element: reflekt, should run on false
logging: reflekt: ObjectUsesProcessor. Element: reflekt, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text reflekt, should run on false
logging: reflekt: ClassUsesProcessor. Element: test, should run on false
logging: reflekt: ObjectUsesProcessor. Element: test, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text test, should run on false
logging: reflekt: ClassUsesProcessor. Element: ir, should run on false
logging: reflekt: ObjectUsesProcessor. Element: ir, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text ir, should run on false
logging: reflekt: ClassUsesProcessor. Element: org, should run on false
logging: reflekt: ObjectUsesProcessor. Element: org, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text org, should run on false
logging: reflekt: ClassUsesProcessor. Element: jetbrains, should run on false
logging: reflekt: ObjectUsesProcessor. Element: jetbrains, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text jetbrains, should run on false
logging: reflekt: ClassUsesProcessor. Element: reflekt, should run on false
logging: reflekt: ObjectUsesProcessor. Element: reflekt, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text reflekt, should run on false
logging: reflekt: ClassUsesProcessor. Element: Reflekt, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Reflekt, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Reflekt, should run on false
logging: reflekt: ClassUsesProcessor. Element: fun getResult() = Reflekt.functions().withAnnotations<(a: Int, b: Float?, c: Set<Boolean>) -> List<String>>(IrTestAnnotation::class).toList().also { f -> f.forEach { it(1, null, emptySet()) } }.map { it.toString() }.toSet(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: fun getResult() = Reflekt.functions().withAnnotations<(a: Int, b: Float?, c: Set<Boolean>) -> List<String>>(IrTestAnnotation::class).toList().also { f -> f.forEach { it(1, null, emptySet()) } }.map { it.toString() }.toSet(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: FUN with text fun getResult() = Reflekt.functions().withAnnotations<(a: Int, b: Float?, c: Set<Boolean>) -> List<String>>(IrTestAnnotation::class).toList().also { f -> f.forEach { it(1, null, emptySet()) } }.map { it.toString() }.toSet(), should run on true
logging: reflekt: ClassUsesProcessor. Element: Reflekt, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Reflekt, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Reflekt, should run on false
logging: reflekt: ClassUsesProcessor. Element: functions(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: functions(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text functions(), should run on false
logging: reflekt: ClassUsesProcessor. Element: functions, should run on false
logging: reflekt: ObjectUsesProcessor. Element: functions, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text functions, should run on false
logging: reflekt: ClassUsesProcessor. Element: withAnnotations<(a: Int, b: Float?, c: Set<Boolean>) -> List<String>>(IrTestAnnotation::class), should run on false
logging: reflekt: ObjectUsesProcessor. Element: withAnnotations<(a: Int, b: Float?, c: Set<Boolean>) -> List<String>>(IrTestAnnotation::class), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text withAnnotations<(a: Int, b: Float?, c: Set<Boolean>) -> List<String>>(IrTestAnnotation::class), should run on false
logging: reflekt: ClassUsesProcessor. Element: withAnnotations, should run on false
logging: reflekt: ObjectUsesProcessor. Element: withAnnotations, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text withAnnotations, should run on false
logging: reflekt: ClassUsesProcessor. Element: Int, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Int, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Int, should run on false
logging: reflekt: ClassUsesProcessor. Element: Float, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Float, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Float, should run on false
logging: reflekt: ClassUsesProcessor. Element: Set, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Set, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Set, should run on false
logging: reflekt: ClassUsesProcessor. Element: Boolean, should run on false
logging: reflekt: ObjectUsesProcessor. Element: Boolean, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text Boolean, should run on false
logging: reflekt: ClassUsesProcessor. Element: List, should run on false
logging: reflekt: ObjectUsesProcessor. Element: List, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text List, should run on false
logging: reflekt: ClassUsesProcessor. Element: String, should run on false
logging: reflekt: ObjectUsesProcessor. Element: String, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text String, should run on false
logging: reflekt: ClassUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: ObjectUsesProcessor. Element: IrTestAnnotation, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text IrTestAnnotation, should run on false
logging: reflekt: ClassUsesProcessor. Element: toList(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toList(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toList(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toList, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toList, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toList, should run on false
logging: reflekt: ClassUsesProcessor. Element: also { f -> f.forEach { it(1, null, emptySet()) } }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: also { f -> f.forEach { it(1, null, emptySet()) } }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text also { f -> f.forEach { it(1, null, emptySet()) } }, should run on false
logging: reflekt: ClassUsesProcessor. Element: also, should run on false
logging: reflekt: ObjectUsesProcessor. Element: also, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text also, should run on false
logging: reflekt: ClassUsesProcessor. Element: f, should run on false
logging: reflekt: ObjectUsesProcessor. Element: f, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text f, should run on false
logging: reflekt: ClassUsesProcessor. Element: forEach { it(1, null, emptySet()) }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: forEach { it(1, null, emptySet()) }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text forEach { it(1, null, emptySet()) }, should run on false
logging: reflekt: ClassUsesProcessor. Element: forEach, should run on false
logging: reflekt: ObjectUsesProcessor. Element: forEach, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text forEach, should run on false
logging: reflekt: ClassUsesProcessor. Element: it(1, null, emptySet()), should run on false
logging: reflekt: ObjectUsesProcessor. Element: it(1, null, emptySet()), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text it(1, null, emptySet()), should run on false
logging: reflekt: ClassUsesProcessor. Element: it, should run on false
logging: reflekt: ObjectUsesProcessor. Element: it, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text it, should run on false
logging: reflekt: ClassUsesProcessor. Element: emptySet(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: emptySet(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text emptySet(), should run on false
logging: reflekt: ClassUsesProcessor. Element: emptySet, should run on false
logging: reflekt: ObjectUsesProcessor. Element: emptySet, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text emptySet, should run on false
logging: reflekt: ClassUsesProcessor. Element: map { it.toString() }, should run on false
logging: reflekt: ObjectUsesProcessor. Element: map { it.toString() }, should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text map { it.toString() }, should run on false
logging: reflekt: ClassUsesProcessor. Element: map, should run on false
logging: reflekt: ObjectUsesProcessor. Element: map, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text map, should run on false
logging: reflekt: ClassUsesProcessor. Element: it, should run on false
logging: reflekt: ObjectUsesProcessor. Element: it, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text it, should run on false
logging: reflekt: ClassUsesProcessor. Element: toString(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toString(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toString, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toString, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toString, should run on false
logging: reflekt: ClassUsesProcessor. Element: toSet(), should run on false
logging: reflekt: ObjectUsesProcessor. Element: toSet(), should run on false
logging: reflekt: FunctionUsesProcessor. Element: CALL_EXPRESSION with text toSet(), should run on false
logging: reflekt: ClassUsesProcessor. Element: toSet, should run on false
logging: reflekt: ObjectUsesProcessor. Element: toSet, should run on false
logging: reflekt: FunctionUsesProcessor. Element: REFERENCE_EXPRESSION with text toSet, should run on false
logging: reflekt: Finish analyzing file Main.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Getting uses from sources has done!
logging: reflekt: Start analysis <main> module's files
logging: reflekt: IrReflektUses were created successfully
logging: reflekt: Getting instances....
logging: reflekt: Start analyzing file Annotations.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Finish analyzing file Annotations.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Start analyzing file Classes.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Finish analyzing file Classes.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Start analyzing file Functions.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Finish analyzing file Functions.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Start analyzing file Objects.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Finish analyzing file Objects.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Start analyzing file Main.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Finish analyzing file Main.kt (package org.jetbrains.reflekt.test.ir)
logging: reflekt: Getting instances has done!
logging: reflekt: @IrTestAnnotation
fun fun1() {}
logging: reflekt: @IrTestAnnotation
fun fun2(): Int = 3
logging: reflekt: @IrTestAnnotation
fun fun3(): List<Int> = listOf(3)
logging: reflekt: @IrTestAnnotation
fun fun4(a: Int, b: Float?, c: Set<Boolean>): List<String> = listOf(a.toString(), b.toString(), c.toString())
logging: reflekt: fun fooBoolean(): Boolean {
    println("public second example foo")
    return true
}
logging: reflekt: fun getResult() = Reflekt.functions().withAnnotations<(a: Int, b: Float?, c: Set<Boolean>) -> List<String>>(IrTestAnnotation::class).toList().also { f -> f.forEach { it(1, null, emptySet()) } }.map { it.toString() }.toSet()
logging: reflekt: IrReflektInstances were created successfully
logging: reflekt: Finish analysis <main> module's files;
Uses: IrReflektUses(objects={}, classes={}, functions={SignatureToAnnotations(signature=Function3<[@kotlin.ParameterName] Int, [@kotlin.ParameterName] Float?, [@kotlin.ParameterName] Set<Boolean>, List<String>>, annotations=[org.jetbrains.reflekt.test.ir.IrTestAnnotation])=[IrFunctionInfo(fqName=org.jetbrains.reflekt.test.ir.fun4, receiverFqName=null, isObjectReceiver=false)]})
Instances: IrReflektInstances(objects=[IrTypeInstance(instance=OBJECT_DECLARATION, info=org.jetbrains.reflekt.test.ir.FunctionTestClass.Companion), IrTypeInstance(instance=OBJECT_DECLARATION, info=org.jetbrains.reflekt.test.ir.FunctionTestObject), IrTypeInstance(instance=OBJECT_DECLARATION, info=org.jetbrains.reflekt.test.ir.O1), IrTypeInstance(instance=OBJECT_DECLARATION, info=org.jetbrains.reflekt.test.ir.O1.O2)], classes=[IrTypeInstance(instance=CLASS, info=org.jetbrains.reflekt.test.ir.FunctionTestClass), IrTypeInstance(instance=CLASS, info=org.jetbrains.reflekt.test.ir.IrTestAnnotation), IrTypeInstance(instance=CLASS, info=org.jetbrains.reflekt.test.ir.C1), IrTypeInstance(instance=CLASS, info=org.jetbrains.reflekt.test.ir.C2), IrTypeInstance(instance=CLASS, info=org.jetbrains.reflekt.test.ir.C3), IrTypeInstance(instance=CLASS, info=org.jetbrains.reflekt.test.ir.C3.C5)], functions=[IrTypeInstance(instance=FUN, info=IrFunctionInfo(fqName=org.jetbrains.reflekt.test.ir.fun1, receiverFqName=null, isObjectReceiver=false)), IrTypeInstance(instance=FUN, info=IrFunctionInfo(fqName=org.jetbrains.reflekt.test.ir.fun2, receiverFqName=null, isObjectReceiver=false)), IrTypeInstance(instance=FUN, info=IrFunctionInfo(fqName=org.jetbrains.reflekt.test.ir.fun3, receiverFqName=null, isObjectReceiver=false)), IrTypeInstance(instance=FUN, info=IrFunctionInfo(fqName=org.jetbrains.reflekt.test.ir.fun4, receiverFqName=null, isObjectReceiver=false)), IrTypeInstance(instance=FUN, info=IrFunctionInfo(fqName=org.jetbrains.reflekt.test.ir.fooBoolean, receiverFqName=null, isObjectReceiver=false)), IrTypeInstance(instance=FUN, info=IrFunctionInfo(fqName=org.jetbrains.reflekt.test.ir.getResult, receiverFqName=null, isObjectReceiver=false))])
logging: reflekt: Finish analysis with ReflektModuleAnalysisExtension
logging: reflekt: [IR] REFLEKT CALL: org.jetbrains.reflekt.Reflekt.Functions.WithAnnotations.toList;
logging: reflekt: [IR] INVOKE ARGUMENTS: SignatureToAnnotations(signature=Function3<[@kotlin.ParameterName] Int, [@kotlin.ParameterName] Float?, [@kotlin.ParameterName] Set<Boolean>, List<String>>, annotations=[org.jetbrains.reflekt.test.ir.IrTestAnnotation])
logging: reflekt: RES ARGS: [kotlin.Int, kotlin.Float, kotlin.collections.Set, kotlin.collections.List]
logging: reflekt: [IR] FOUND CALL (FUNCTIONS):
CALL 'public final fun toList (): kotlin.collections.List<T of org.jetbrains.reflekt.Reflekt.Functions.WithAnnotations> declared in org.jetbrains.reflekt.Reflekt.Functions.WithAnnotations' type=kotlin.collections.List<kotlin.Function3<@[ParameterName(name = 'a')] kotlin.Int, @[ParameterName(name = 'b')] kotlin.Float?, @[ParameterName(name = 'c')] kotlin.collections.Set<kotlin.Boolean>, kotlin.collections.List<kotlin.String>>> origin=null
  $this: CALL 'public final fun withAnnotations <T> (vararg klasses: kotlin.reflect.KClass<out kotlin.Annotation>): org.jetbrains.reflekt.Reflekt.Functions.WithAnnotations<T of org.jetbrains.reflekt.Reflekt.Functions.withAnnotations> [inline] declared in org.jetbrains.reflekt.Reflekt.Functions' type=org.jetbrains.reflekt.Reflekt.Functions.WithAnnotations<kotlin.Function3<@[ParameterName(name = 'a')] kotlin.Int, @[ParameterName(name = 'b')] kotlin.Float?, @[ParameterName(name = 'c')] kotlin.collections.Set<kotlin.Boolean>, kotlin.collections.List<kotlin.String>>> origin=null
    <T>: kotlin.Function3<@[ParameterName(name = 'a')] kotlin.Int, @[ParameterName(name = 'b')] kotlin.Float?, @[ParameterName(name = 'c')] kotlin.collections.Set<kotlin.Boolean>, kotlin.collections.List<kotlin.String>>
    $this: CALL 'public final fun functions (): org.jetbrains.reflekt.Reflekt.Functions declared in org.jetbrains.reflekt.Reflekt' type=org.jetbrains.reflekt.Reflekt.Functions origin=null
      $this: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Reflekt modality:FINAL visibility:public superTypes:[kotlin.Any]' type=org.jetbrains.reflekt.Reflekt
    klasses: VARARG type=kotlin.Array<out kotlin.reflect.KClass<out kotlin.Annotation>> varargElementType=kotlin.reflect.KClass<out kotlin.Annotation>
      CLASS_REFERENCE 'CLASS ANNOTATION_CLASS name:IrTestAnnotation modality:FINAL visibility:public superTypes:[kotlin.Annotation]' type=kotlin.reflect.KClass<org.jetbrains.reflekt.test.ir.IrTestAnnotation>

logging: reflekt: [IR] GENERATE CALL:
CALL 'public final fun listOf <T> (vararg elements: T of kotlin.collections.CollectionsKt.listOf): kotlin.collections.List<T of kotlin.collections.CollectionsKt.listOf> declared in kotlin.collections.CollectionsKt' type=kotlin.collections.List<kotlin.Function3<@[ParameterName(name = 'a')] kotlin.Int, @[ParameterName(name = 'b')] kotlin.Float?, @[ParameterName(name = 'c')] kotlin.collections.Set<kotlin.Boolean>, kotlin.collections.List<kotlin.String>>> origin=null
  <T>: kotlin.Function3<@[ParameterName(name = 'a')] kotlin.Int, @[ParameterName(name = 'b')] kotlin.Float?, @[ParameterName(name = 'c')] kotlin.collections.Set<kotlin.Boolean>, kotlin.collections.List<kotlin.String>>
  elements: VARARG type=kotlin.Array<out kotlin.Function3<@[ParameterName(name = 'a')] kotlin.Int, @[ParameterName(name = 'b')] kotlin.Float?, @[ParameterName(name = 'c')] kotlin.collections.Set<kotlin.Boolean>, kotlin.collections.List<kotlin.String>>> varargElementType=kotlin.Function3<@[ParameterName(name = 'a')] kotlin.Int, @[ParameterName(name = 'b')] kotlin.Float?, @[ParameterName(name = 'c')] kotlin.collections.Set<kotlin.Boolean>, kotlin.collections.List<kotlin.String>>
    FUNCTION_REFERENCE 'public final fun fun4 (a: kotlin.Int, b: kotlin.Float?, c: kotlin.collections.Set<kotlin.Boolean>): kotlin.collections.List<kotlin.String> declared in org.jetbrains.reflekt.test.ir' type=kotlin.reflect.KFunction3<@[ParameterName(name = 'a')] kotlin.Int, @[ParameterName(name = 'b')] kotlin.Float?, @[ParameterName(name = 'c')] kotlin.collections.Set<kotlin.Boolean>, kotlin.collections.List<kotlin.String>> origin=null reflectionTarget=<same>

output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/IrTestAnnotation.class
Sources:
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Annotations.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/CInterface.class
Sources:
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Classes.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/C1.class
Sources:
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Classes.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/C2.class
Sources:
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Classes.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/C3.class
Sources:
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Classes.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/C3$C5.class
Sources:
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Classes.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/FunctionTestClass.class
Sources:
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Functions.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/FunctionTestClass$Companion.class
Sources:
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Functions.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/FunctionTestObject.class
Sources:
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Functions.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/FunctionsKt.class
Sources:
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Functions.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/OInterface.class
Sources:
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Objects.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/O1.class
Sources:
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Objects.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/O1$O2.class
Sources:
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Objects.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/MainKt.class
Sources:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/sources/Main.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/org/jetbrains/reflekt/test/ir/MainKt$getResult$1.class
Sources:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/sources/Main.kt
output: output:
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/classes/META-INF/main.kotlin_module
Sources:
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Classes.kt
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Annotations.kt
/var/folders/lg/bjjqkp4x509byv3qkgc1_plh0000kt/T/Kotlin-Compilation12892204978284758669/sources/Main.kt
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Functions.kt
/Users/Anastasiia.Birillo/IdeaProjects/reflekt/reflekt-plugin/build/resources/test/org/jetbrains/reflekt/plugin/ir/commonTestFiles/test/Objects.kt
